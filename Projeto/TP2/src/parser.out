Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> DeclBlock CommandBlock
Rule 2     DeclBlock -> DeclBegin Vars DeclEnd
Rule 3     Vars -> Vars Var
Rule 4     Vars -> Var
Rule 5     Var -> IntVar
Rule 6     Var -> BoolVar
Rule 7     Var -> StringVar
Rule 8     Var -> ArrVar
Rule 9     Var -> Arr2Var
Rule 10    IntVar -> IntDecl Name Decl ExpressionI
Rule 11    IntVar -> IntDecl Name
Rule 12    BoolVar -> BoolDecl Name Decl ExpressionB
Rule 13    BoolVar -> BoolDecl Name
Rule 14    StringVar -> StringDecl Name Decl String
Rule 15    StringVar -> StringDecl Name
Rule 16    ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name
Rule 17    Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name
Rule 18    CommandBlock -> CommandBlock Command
Rule 19    CommandBlock -> Command
Rule 20    Command -> Assign
Rule 21    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
Rule 22    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
Rule 23    Assign -> Name ASSIGN ExpressionB
Rule 24    Assign -> Name ASSIGN String
Rule 25    Assign -> Name ASSIGN ReadString LPAREN RPAREN
Rule 26    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
Rule 27    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
Rule 28    PrintableElem -> Name
Rule 29    PrintableElem -> ExpressionB
Rule 30    PrintableElem -> String
Rule 31    PrintableList -> PrintableList COMMA PrintableElem
Rule 32    PrintableList -> PrintableElem
Rule 33    Command -> WriteString LPAREN PrintableList RPAREN
Rule 34    Command -> Err LPAREN String RPAREN
Rule 35    ExpressionB -> ExpressionB OR AndExpressionB
Rule 36    ExpressionB -> AndExpressionB
Rule 37    AndExpressionB -> AndExpressionB AND EqExpressionB
Rule 38    AndExpressionB -> EqExpressionB
Rule 39    EqExpressionB -> EqExpressionB EQ RelExpressionB
Rule 40    EqExpressionB -> EqExpressionB NEQ RelExpressionB
Rule 41    EqExpressionB -> RelExpressionB
Rule 42    RelExpressionB -> RelExpressionB LT ExpressionI
Rule 43    RelExpressionB -> RelExpressionB LE ExpressionI
Rule 44    RelExpressionB -> RelExpressionB GT ExpressionI
Rule 45    RelExpressionB -> RelExpressionB GE ExpressionI
Rule 46    RelExpressionB -> ExpressionI
Rule 47    ExpressionI -> ExpressionI PLUS TermI
Rule 48    ExpressionI -> ExpressionI MINUS TermI
Rule 49    ExpressionI -> TermI
Rule 50    TermI -> TermI TIMES FactorI
Rule 51    TermI -> TermI DIVIDE FactorI
Rule 52    TermI -> TermI MOD FactorI
Rule 53    TermI -> FactorI
Rule 54    FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET
Rule 55    FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
Rule 56    FactorI -> UnaryExpressionB
Rule 57    UnaryExpressionB -> NOT FinalExpressionB
Rule 58    UnaryExpressionB -> MINUS FinalExpressionB
Rule 59    UnaryExpressionB -> FinalExpressionB
Rule 60    FinalExpressionB -> Integer
Rule 61    FinalExpressionB -> Name
Rule 62    FinalExpressionB -> Bool
Rule 63    FinalExpressionB -> LPAREN ExpressionB RPAREN
Rule 64    Command -> IfThenElse
Rule 65    Command -> IfThen
Rule 66    IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
Rule 67    IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET
Rule 68    Command -> WhileDo
Rule 69    WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET

Terminals, with rules where they appear

AND                  : 37
ASSIGN               : 21 22 23 24 25 26 27
Bool                 : 62
BoolDecl             : 12 13
COMMA                : 31
DIVIDE               : 51
Decl                 : 10 12 14
DeclBegin            : 2
DeclEnd              : 2
EQ                   : 39
Else                 : 66
Err                  : 34
GE                   : 45
GT                   : 44
If                   : 66 67
IntDecl              : 10 11 16 17
Integer              : 16 17 17 60
LBRACKET             : 66 66 67 69
LE                   : 43
LPAREN               : 25 26 27 33 34 63
LSQBRACKET           : 16 17 17 21 22 22 26 27 27 54 55 55
LT                   : 42
MINUS                : 48 58
MOD                  : 52
NEQ                  : 40
NOT                  : 57
Name                 : 10 11 12 13 14 15 16 17 21 22 23 24 25 26 27 28 54 55 61
OR                   : 35
PLUS                 : 47
RBRACKET             : 66 66 67 69
RPAREN               : 25 26 27 33 34 63
RSQBRACKET           : 16 17 17 21 22 22 26 27 27 54 55 55
ReadString           : 25 26 27
String               : 14 24 30 34
StringDecl           : 14 15
TIMES                : 50
Then                 : 66 67
While                : 69
WriteString          : 33
error                : 

Nonterminals, with rules where they appear

AndExpressionB       : 35 36 37
Arr2Var              : 9
ArrVar               : 8
Assign               : 20
BoolVar              : 6
Command              : 18 19
CommandBlock         : 1 18 66 66 67 69
DeclBlock            : 1
EqExpressionB        : 37 38 39 40
ExpressionB          : 12 23 29 35 63 66 67 69
ExpressionI          : 10 21 21 22 22 22 26 27 27 42 43 44 45 46 47 48 54 55 55
FactorI              : 50 51 52 53
FinalExpressionB     : 57 58 59
IfThen               : 65
IfThenElse           : 64
IntVar               : 5
PrintableElem        : 31 32
PrintableList        : 31 33
Program              : 0
RelExpressionB       : 39 40 41 42 43 44 45
StringVar            : 7
TermI                : 47 48 49 50 51 52
UnaryExpressionB     : 56
Var                  : 3 4
Vars                 : 2 3
WhileDo              : 68

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . DeclBlock CommandBlock
    (2) DeclBlock -> . DeclBegin Vars DeclEnd

    DeclBegin       shift and go to state 3

    Program                        shift and go to state 1
    DeclBlock                      shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> DeclBlock . CommandBlock
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 4
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 3

    (2) DeclBlock -> DeclBegin . Vars DeclEnd
    (3) Vars -> . Vars Var
    (4) Vars -> . Var
    (5) Var -> . IntVar
    (6) Var -> . BoolVar
    (7) Var -> . StringVar
    (8) Var -> . ArrVar
    (9) Var -> . Arr2Var
    (10) IntVar -> . IntDecl Name Decl ExpressionI
    (11) IntVar -> . IntDecl Name
    (12) BoolVar -> . BoolDecl Name Decl ExpressionB
    (13) BoolVar -> . BoolDecl Name
    (14) StringVar -> . StringDecl Name Decl String
    (15) StringVar -> . StringDecl Name
    (16) ArrVar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name
    (17) Arr2Var -> . IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    IntDecl         shift and go to state 22
    BoolDecl        shift and go to state 23
    StringDecl      shift and go to state 24

    Vars                           shift and go to state 15
    Var                            shift and go to state 16
    IntVar                         shift and go to state 17
    BoolVar                        shift and go to state 18
    StringVar                      shift and go to state 19
    ArrVar                         shift and go to state 20
    Arr2Var                        shift and go to state 21

state 4

    (1) Program -> DeclBlock CommandBlock .
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    $end            reduce using rule 1 (Program -> DeclBlock CommandBlock .)
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 5

    (19) CommandBlock -> Command .

    WriteString     reduce using rule 19 (CommandBlock -> Command .)
    Err             reduce using rule 19 (CommandBlock -> Command .)
    Name            reduce using rule 19 (CommandBlock -> Command .)
    If              reduce using rule 19 (CommandBlock -> Command .)
    While           reduce using rule 19 (CommandBlock -> Command .)
    $end            reduce using rule 19 (CommandBlock -> Command .)
    RBRACKET        reduce using rule 19 (CommandBlock -> Command .)


state 6

    (20) Command -> Assign .

    WriteString     reduce using rule 20 (Command -> Assign .)
    Err             reduce using rule 20 (Command -> Assign .)
    Name            reduce using rule 20 (Command -> Assign .)
    If              reduce using rule 20 (Command -> Assign .)
    While           reduce using rule 20 (Command -> Assign .)
    $end            reduce using rule 20 (Command -> Assign .)
    RBRACKET        reduce using rule 20 (Command -> Assign .)


state 7

    (33) Command -> WriteString . LPAREN PrintableList RPAREN

    LPAREN          shift and go to state 26


state 8

    (34) Command -> Err . LPAREN String RPAREN

    LPAREN          shift and go to state 27


state 9

    (64) Command -> IfThenElse .

    WriteString     reduce using rule 64 (Command -> IfThenElse .)
    Err             reduce using rule 64 (Command -> IfThenElse .)
    Name            reduce using rule 64 (Command -> IfThenElse .)
    If              reduce using rule 64 (Command -> IfThenElse .)
    While           reduce using rule 64 (Command -> IfThenElse .)
    $end            reduce using rule 64 (Command -> IfThenElse .)
    RBRACKET        reduce using rule 64 (Command -> IfThenElse .)


state 10

    (65) Command -> IfThen .

    WriteString     reduce using rule 65 (Command -> IfThen .)
    Err             reduce using rule 65 (Command -> IfThen .)
    Name            reduce using rule 65 (Command -> IfThen .)
    If              reduce using rule 65 (Command -> IfThen .)
    While           reduce using rule 65 (Command -> IfThen .)
    $end            reduce using rule 65 (Command -> IfThen .)
    RBRACKET        reduce using rule 65 (Command -> IfThen .)


state 11

    (68) Command -> WhileDo .

    WriteString     reduce using rule 68 (Command -> WhileDo .)
    Err             reduce using rule 68 (Command -> WhileDo .)
    Name            reduce using rule 68 (Command -> WhileDo .)
    If              reduce using rule 68 (Command -> WhileDo .)
    While           reduce using rule 68 (Command -> WhileDo .)
    $end            reduce using rule 68 (Command -> WhileDo .)
    RBRACKET        reduce using rule 68 (Command -> WhileDo .)


state 12

    (21) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> Name . ASSIGN ExpressionB
    (24) Assign -> Name . ASSIGN String
    (25) Assign -> Name . ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN

    LSQBRACKET      shift and go to state 28
    ASSIGN          shift and go to state 29


state 13

    (66) IfThenElse -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionB                    shift and go to state 30
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 14

    (69) WhileDo -> While . ExpressionB LBRACKET CommandBlock RBRACKET
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionB                    shift and go to state 45
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 15

    (2) DeclBlock -> DeclBegin Vars . DeclEnd
    (3) Vars -> Vars . Var
    (5) Var -> . IntVar
    (6) Var -> . BoolVar
    (7) Var -> . StringVar
    (8) Var -> . ArrVar
    (9) Var -> . Arr2Var
    (10) IntVar -> . IntDecl Name Decl ExpressionI
    (11) IntVar -> . IntDecl Name
    (12) BoolVar -> . BoolDecl Name Decl ExpressionB
    (13) BoolVar -> . BoolDecl Name
    (14) StringVar -> . StringDecl Name Decl String
    (15) StringVar -> . StringDecl Name
    (16) ArrVar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name
    (17) Arr2Var -> . IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    DeclEnd         shift and go to state 46
    IntDecl         shift and go to state 22
    BoolDecl        shift and go to state 23
    StringDecl      shift and go to state 24

    Var                            shift and go to state 47
    IntVar                         shift and go to state 17
    BoolVar                        shift and go to state 18
    StringVar                      shift and go to state 19
    ArrVar                         shift and go to state 20
    Arr2Var                        shift and go to state 21

state 16

    (4) Vars -> Var .

    DeclEnd         reduce using rule 4 (Vars -> Var .)
    IntDecl         reduce using rule 4 (Vars -> Var .)
    BoolDecl        reduce using rule 4 (Vars -> Var .)
    StringDecl      reduce using rule 4 (Vars -> Var .)


state 17

    (5) Var -> IntVar .

    DeclEnd         reduce using rule 5 (Var -> IntVar .)
    IntDecl         reduce using rule 5 (Var -> IntVar .)
    BoolDecl        reduce using rule 5 (Var -> IntVar .)
    StringDecl      reduce using rule 5 (Var -> IntVar .)


state 18

    (6) Var -> BoolVar .

    DeclEnd         reduce using rule 6 (Var -> BoolVar .)
    IntDecl         reduce using rule 6 (Var -> BoolVar .)
    BoolDecl        reduce using rule 6 (Var -> BoolVar .)
    StringDecl      reduce using rule 6 (Var -> BoolVar .)


state 19

    (7) Var -> StringVar .

    DeclEnd         reduce using rule 7 (Var -> StringVar .)
    IntDecl         reduce using rule 7 (Var -> StringVar .)
    BoolDecl        reduce using rule 7 (Var -> StringVar .)
    StringDecl      reduce using rule 7 (Var -> StringVar .)


state 20

    (8) Var -> ArrVar .

    DeclEnd         reduce using rule 8 (Var -> ArrVar .)
    IntDecl         reduce using rule 8 (Var -> ArrVar .)
    BoolDecl        reduce using rule 8 (Var -> ArrVar .)
    StringDecl      reduce using rule 8 (Var -> ArrVar .)


state 21

    (9) Var -> Arr2Var .

    DeclEnd         reduce using rule 9 (Var -> Arr2Var .)
    IntDecl         reduce using rule 9 (Var -> Arr2Var .)
    BoolDecl        reduce using rule 9 (Var -> Arr2Var .)
    StringDecl      reduce using rule 9 (Var -> Arr2Var .)


state 22

    (10) IntVar -> IntDecl . Name Decl ExpressionI
    (11) IntVar -> IntDecl . Name
    (16) ArrVar -> IntDecl . LSQBRACKET Integer RSQBRACKET Name
    (17) Arr2Var -> IntDecl . LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    Name            shift and go to state 48
    LSQBRACKET      shift and go to state 49


state 23

    (12) BoolVar -> BoolDecl . Name Decl ExpressionB
    (13) BoolVar -> BoolDecl . Name

    Name            shift and go to state 50


state 24

    (14) StringVar -> StringDecl . Name Decl String
    (15) StringVar -> StringDecl . Name

    Name            shift and go to state 51


state 25

    (18) CommandBlock -> CommandBlock Command .

    WriteString     reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    Err             reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    Name            reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    If              reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    While           reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    $end            reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    RBRACKET        reduce using rule 18 (CommandBlock -> CommandBlock Command .)


state 26

    (33) Command -> WriteString LPAREN . PrintableList RPAREN
    (31) PrintableList -> . PrintableList COMMA PrintableElem
    (32) PrintableList -> . PrintableElem
    (28) PrintableElem -> . Name
    (29) PrintableElem -> . ExpressionB
    (30) PrintableElem -> . String
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 54
    String          shift and go to state 56
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    PrintableList                  shift and go to state 52
    PrintableElem                  shift and go to state 53
    ExpressionB                    shift and go to state 55
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 27

    (34) Command -> Err LPAREN . String RPAREN

    String          shift and go to state 57


state 28

    (21) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (26) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 58
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 29

    (23) Assign -> Name ASSIGN . ExpressionB
    (24) Assign -> Name ASSIGN . String
    (25) Assign -> Name ASSIGN . ReadString LPAREN RPAREN
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    String          shift and go to state 60
    ReadString      shift and go to state 61
    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionB                    shift and go to state 59
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 30

    (66) IfThenElse -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    Then            shift and go to state 62
    OR              shift and go to state 63


state 31

    (36) ExpressionB -> AndExpressionB .
    (37) AndExpressionB -> AndExpressionB . AND EqExpressionB

    Then            reduce using rule 36 (ExpressionB -> AndExpressionB .)
    OR              reduce using rule 36 (ExpressionB -> AndExpressionB .)
    LBRACKET        reduce using rule 36 (ExpressionB -> AndExpressionB .)
    RPAREN          reduce using rule 36 (ExpressionB -> AndExpressionB .)
    COMMA           reduce using rule 36 (ExpressionB -> AndExpressionB .)
    WriteString     reduce using rule 36 (ExpressionB -> AndExpressionB .)
    Err             reduce using rule 36 (ExpressionB -> AndExpressionB .)
    Name            reduce using rule 36 (ExpressionB -> AndExpressionB .)
    If              reduce using rule 36 (ExpressionB -> AndExpressionB .)
    While           reduce using rule 36 (ExpressionB -> AndExpressionB .)
    $end            reduce using rule 36 (ExpressionB -> AndExpressionB .)
    RBRACKET        reduce using rule 36 (ExpressionB -> AndExpressionB .)
    DeclEnd         reduce using rule 36 (ExpressionB -> AndExpressionB .)
    IntDecl         reduce using rule 36 (ExpressionB -> AndExpressionB .)
    BoolDecl        reduce using rule 36 (ExpressionB -> AndExpressionB .)
    StringDecl      reduce using rule 36 (ExpressionB -> AndExpressionB .)
    AND             shift and go to state 64


state 32

    (38) AndExpressionB -> EqExpressionB .
    (39) EqExpressionB -> EqExpressionB . EQ RelExpressionB
    (40) EqExpressionB -> EqExpressionB . NEQ RelExpressionB

    AND             reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    Then            reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    OR              reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    LBRACKET        reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    RPAREN          reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    COMMA           reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    WriteString     reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    Err             reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    Name            reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    If              reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    While           reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    $end            reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    RBRACKET        reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    DeclEnd         reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    IntDecl         reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    BoolDecl        reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    StringDecl      reduce using rule 38 (AndExpressionB -> EqExpressionB .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66


state 33

    (41) EqExpressionB -> RelExpressionB .
    (42) RelExpressionB -> RelExpressionB . LT ExpressionI
    (43) RelExpressionB -> RelExpressionB . LE ExpressionI
    (44) RelExpressionB -> RelExpressionB . GT ExpressionI
    (45) RelExpressionB -> RelExpressionB . GE ExpressionI

    EQ              reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    NEQ             reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    AND             reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    Then            reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    OR              reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    LBRACKET        reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    RPAREN          reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    COMMA           reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    WriteString     reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    Err             reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    Name            reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    If              reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    While           reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    $end            reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    RBRACKET        reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    DeclEnd         reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    IntDecl         reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    BoolDecl        reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    StringDecl      reduce using rule 41 (EqExpressionB -> RelExpressionB .)
    LT              shift and go to state 67
    LE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70


state 34

    (46) RelExpressionB -> ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    LT              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    LE              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    GT              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    GE              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    EQ              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    NEQ             reduce using rule 46 (RelExpressionB -> ExpressionI .)
    AND             reduce using rule 46 (RelExpressionB -> ExpressionI .)
    Then            reduce using rule 46 (RelExpressionB -> ExpressionI .)
    OR              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    LBRACKET        reduce using rule 46 (RelExpressionB -> ExpressionI .)
    RPAREN          reduce using rule 46 (RelExpressionB -> ExpressionI .)
    COMMA           reduce using rule 46 (RelExpressionB -> ExpressionI .)
    WriteString     reduce using rule 46 (RelExpressionB -> ExpressionI .)
    Err             reduce using rule 46 (RelExpressionB -> ExpressionI .)
    Name            reduce using rule 46 (RelExpressionB -> ExpressionI .)
    If              reduce using rule 46 (RelExpressionB -> ExpressionI .)
    While           reduce using rule 46 (RelExpressionB -> ExpressionI .)
    $end            reduce using rule 46 (RelExpressionB -> ExpressionI .)
    RBRACKET        reduce using rule 46 (RelExpressionB -> ExpressionI .)
    DeclEnd         reduce using rule 46 (RelExpressionB -> ExpressionI .)
    IntDecl         reduce using rule 46 (RelExpressionB -> ExpressionI .)
    BoolDecl        reduce using rule 46 (RelExpressionB -> ExpressionI .)
    StringDecl      reduce using rule 46 (RelExpressionB -> ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 35

    (49) ExpressionI -> TermI .
    (50) TermI -> TermI . TIMES FactorI
    (51) TermI -> TermI . DIVIDE FactorI
    (52) TermI -> TermI . MOD FactorI

    PLUS            reduce using rule 49 (ExpressionI -> TermI .)
    MINUS           reduce using rule 49 (ExpressionI -> TermI .)
    LT              reduce using rule 49 (ExpressionI -> TermI .)
    LE              reduce using rule 49 (ExpressionI -> TermI .)
    GT              reduce using rule 49 (ExpressionI -> TermI .)
    GE              reduce using rule 49 (ExpressionI -> TermI .)
    EQ              reduce using rule 49 (ExpressionI -> TermI .)
    NEQ             reduce using rule 49 (ExpressionI -> TermI .)
    AND             reduce using rule 49 (ExpressionI -> TermI .)
    Then            reduce using rule 49 (ExpressionI -> TermI .)
    OR              reduce using rule 49 (ExpressionI -> TermI .)
    LBRACKET        reduce using rule 49 (ExpressionI -> TermI .)
    RPAREN          reduce using rule 49 (ExpressionI -> TermI .)
    COMMA           reduce using rule 49 (ExpressionI -> TermI .)
    RSQBRACKET      reduce using rule 49 (ExpressionI -> TermI .)
    WriteString     reduce using rule 49 (ExpressionI -> TermI .)
    Err             reduce using rule 49 (ExpressionI -> TermI .)
    Name            reduce using rule 49 (ExpressionI -> TermI .)
    If              reduce using rule 49 (ExpressionI -> TermI .)
    While           reduce using rule 49 (ExpressionI -> TermI .)
    $end            reduce using rule 49 (ExpressionI -> TermI .)
    RBRACKET        reduce using rule 49 (ExpressionI -> TermI .)
    DeclEnd         reduce using rule 49 (ExpressionI -> TermI .)
    IntDecl         reduce using rule 49 (ExpressionI -> TermI .)
    BoolDecl        reduce using rule 49 (ExpressionI -> TermI .)
    StringDecl      reduce using rule 49 (ExpressionI -> TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 36

    (58) UnaryExpressionB -> MINUS . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Integer         shift and go to state 42
    Name            shift and go to state 77
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    FinalExpressionB               shift and go to state 76

state 37

    (53) TermI -> FactorI .

    TIMES           reduce using rule 53 (TermI -> FactorI .)
    DIVIDE          reduce using rule 53 (TermI -> FactorI .)
    MOD             reduce using rule 53 (TermI -> FactorI .)
    PLUS            reduce using rule 53 (TermI -> FactorI .)
    MINUS           reduce using rule 53 (TermI -> FactorI .)
    LT              reduce using rule 53 (TermI -> FactorI .)
    LE              reduce using rule 53 (TermI -> FactorI .)
    GT              reduce using rule 53 (TermI -> FactorI .)
    GE              reduce using rule 53 (TermI -> FactorI .)
    EQ              reduce using rule 53 (TermI -> FactorI .)
    NEQ             reduce using rule 53 (TermI -> FactorI .)
    AND             reduce using rule 53 (TermI -> FactorI .)
    Then            reduce using rule 53 (TermI -> FactorI .)
    OR              reduce using rule 53 (TermI -> FactorI .)
    LBRACKET        reduce using rule 53 (TermI -> FactorI .)
    RPAREN          reduce using rule 53 (TermI -> FactorI .)
    COMMA           reduce using rule 53 (TermI -> FactorI .)
    RSQBRACKET      reduce using rule 53 (TermI -> FactorI .)
    WriteString     reduce using rule 53 (TermI -> FactorI .)
    Err             reduce using rule 53 (TermI -> FactorI .)
    Name            reduce using rule 53 (TermI -> FactorI .)
    If              reduce using rule 53 (TermI -> FactorI .)
    While           reduce using rule 53 (TermI -> FactorI .)
    $end            reduce using rule 53 (TermI -> FactorI .)
    RBRACKET        reduce using rule 53 (TermI -> FactorI .)
    DeclEnd         reduce using rule 53 (TermI -> FactorI .)
    IntDecl         reduce using rule 53 (TermI -> FactorI .)
    BoolDecl        reduce using rule 53 (TermI -> FactorI .)
    StringDecl      reduce using rule 53 (TermI -> FactorI .)


state 38

    (54) FactorI -> Name . LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (61) FinalExpressionB -> Name .

    LSQBRACKET      shift and go to state 78
    TIMES           reduce using rule 61 (FinalExpressionB -> Name .)
    DIVIDE          reduce using rule 61 (FinalExpressionB -> Name .)
    MOD             reduce using rule 61 (FinalExpressionB -> Name .)
    PLUS            reduce using rule 61 (FinalExpressionB -> Name .)
    MINUS           reduce using rule 61 (FinalExpressionB -> Name .)
    LT              reduce using rule 61 (FinalExpressionB -> Name .)
    LE              reduce using rule 61 (FinalExpressionB -> Name .)
    GT              reduce using rule 61 (FinalExpressionB -> Name .)
    GE              reduce using rule 61 (FinalExpressionB -> Name .)
    EQ              reduce using rule 61 (FinalExpressionB -> Name .)
    NEQ             reduce using rule 61 (FinalExpressionB -> Name .)
    AND             reduce using rule 61 (FinalExpressionB -> Name .)
    Then            reduce using rule 61 (FinalExpressionB -> Name .)
    OR              reduce using rule 61 (FinalExpressionB -> Name .)
    LBRACKET        reduce using rule 61 (FinalExpressionB -> Name .)
    RSQBRACKET      reduce using rule 61 (FinalExpressionB -> Name .)
    WriteString     reduce using rule 61 (FinalExpressionB -> Name .)
    Err             reduce using rule 61 (FinalExpressionB -> Name .)
    Name            reduce using rule 61 (FinalExpressionB -> Name .)
    If              reduce using rule 61 (FinalExpressionB -> Name .)
    While           reduce using rule 61 (FinalExpressionB -> Name .)
    $end            reduce using rule 61 (FinalExpressionB -> Name .)
    RBRACKET        reduce using rule 61 (FinalExpressionB -> Name .)
    RPAREN          reduce using rule 61 (FinalExpressionB -> Name .)
    COMMA           reduce using rule 61 (FinalExpressionB -> Name .)
    DeclEnd         reduce using rule 61 (FinalExpressionB -> Name .)
    IntDecl         reduce using rule 61 (FinalExpressionB -> Name .)
    BoolDecl        reduce using rule 61 (FinalExpressionB -> Name .)
    StringDecl      reduce using rule 61 (FinalExpressionB -> Name .)


state 39

    (56) FactorI -> UnaryExpressionB .

    TIMES           reduce using rule 56 (FactorI -> UnaryExpressionB .)
    DIVIDE          reduce using rule 56 (FactorI -> UnaryExpressionB .)
    MOD             reduce using rule 56 (FactorI -> UnaryExpressionB .)
    PLUS            reduce using rule 56 (FactorI -> UnaryExpressionB .)
    MINUS           reduce using rule 56 (FactorI -> UnaryExpressionB .)
    LT              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    LE              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    GT              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    GE              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    EQ              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    NEQ             reduce using rule 56 (FactorI -> UnaryExpressionB .)
    AND             reduce using rule 56 (FactorI -> UnaryExpressionB .)
    Then            reduce using rule 56 (FactorI -> UnaryExpressionB .)
    OR              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    LBRACKET        reduce using rule 56 (FactorI -> UnaryExpressionB .)
    RPAREN          reduce using rule 56 (FactorI -> UnaryExpressionB .)
    COMMA           reduce using rule 56 (FactorI -> UnaryExpressionB .)
    RSQBRACKET      reduce using rule 56 (FactorI -> UnaryExpressionB .)
    WriteString     reduce using rule 56 (FactorI -> UnaryExpressionB .)
    Err             reduce using rule 56 (FactorI -> UnaryExpressionB .)
    Name            reduce using rule 56 (FactorI -> UnaryExpressionB .)
    If              reduce using rule 56 (FactorI -> UnaryExpressionB .)
    While           reduce using rule 56 (FactorI -> UnaryExpressionB .)
    $end            reduce using rule 56 (FactorI -> UnaryExpressionB .)
    RBRACKET        reduce using rule 56 (FactorI -> UnaryExpressionB .)
    DeclEnd         reduce using rule 56 (FactorI -> UnaryExpressionB .)
    IntDecl         reduce using rule 56 (FactorI -> UnaryExpressionB .)
    BoolDecl        reduce using rule 56 (FactorI -> UnaryExpressionB .)
    StringDecl      reduce using rule 56 (FactorI -> UnaryExpressionB .)


state 40

    (57) UnaryExpressionB -> NOT . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Integer         shift and go to state 42
    Name            shift and go to state 77
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    FinalExpressionB               shift and go to state 79

state 41

    (59) UnaryExpressionB -> FinalExpressionB .

    TIMES           reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    DIVIDE          reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    MOD             reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    PLUS            reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    MINUS           reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    LT              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    LE              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    GT              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    GE              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    EQ              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    NEQ             reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    AND             reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    Then            reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    OR              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    LBRACKET        reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    RPAREN          reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    COMMA           reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    RSQBRACKET      reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    WriteString     reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    Err             reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    Name            reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    If              reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    While           reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    $end            reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    RBRACKET        reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    DeclEnd         reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    IntDecl         reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    BoolDecl        reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)
    StringDecl      reduce using rule 59 (UnaryExpressionB -> FinalExpressionB .)


state 42

    (60) FinalExpressionB -> Integer .

    TIMES           reduce using rule 60 (FinalExpressionB -> Integer .)
    DIVIDE          reduce using rule 60 (FinalExpressionB -> Integer .)
    MOD             reduce using rule 60 (FinalExpressionB -> Integer .)
    PLUS            reduce using rule 60 (FinalExpressionB -> Integer .)
    MINUS           reduce using rule 60 (FinalExpressionB -> Integer .)
    LT              reduce using rule 60 (FinalExpressionB -> Integer .)
    LE              reduce using rule 60 (FinalExpressionB -> Integer .)
    GT              reduce using rule 60 (FinalExpressionB -> Integer .)
    GE              reduce using rule 60 (FinalExpressionB -> Integer .)
    EQ              reduce using rule 60 (FinalExpressionB -> Integer .)
    NEQ             reduce using rule 60 (FinalExpressionB -> Integer .)
    AND             reduce using rule 60 (FinalExpressionB -> Integer .)
    Then            reduce using rule 60 (FinalExpressionB -> Integer .)
    OR              reduce using rule 60 (FinalExpressionB -> Integer .)
    LBRACKET        reduce using rule 60 (FinalExpressionB -> Integer .)
    RPAREN          reduce using rule 60 (FinalExpressionB -> Integer .)
    COMMA           reduce using rule 60 (FinalExpressionB -> Integer .)
    RSQBRACKET      reduce using rule 60 (FinalExpressionB -> Integer .)
    WriteString     reduce using rule 60 (FinalExpressionB -> Integer .)
    Err             reduce using rule 60 (FinalExpressionB -> Integer .)
    Name            reduce using rule 60 (FinalExpressionB -> Integer .)
    If              reduce using rule 60 (FinalExpressionB -> Integer .)
    While           reduce using rule 60 (FinalExpressionB -> Integer .)
    $end            reduce using rule 60 (FinalExpressionB -> Integer .)
    RBRACKET        reduce using rule 60 (FinalExpressionB -> Integer .)
    DeclEnd         reduce using rule 60 (FinalExpressionB -> Integer .)
    IntDecl         reduce using rule 60 (FinalExpressionB -> Integer .)
    BoolDecl        reduce using rule 60 (FinalExpressionB -> Integer .)
    StringDecl      reduce using rule 60 (FinalExpressionB -> Integer .)


state 43

    (62) FinalExpressionB -> Bool .

    TIMES           reduce using rule 62 (FinalExpressionB -> Bool .)
    DIVIDE          reduce using rule 62 (FinalExpressionB -> Bool .)
    MOD             reduce using rule 62 (FinalExpressionB -> Bool .)
    PLUS            reduce using rule 62 (FinalExpressionB -> Bool .)
    MINUS           reduce using rule 62 (FinalExpressionB -> Bool .)
    LT              reduce using rule 62 (FinalExpressionB -> Bool .)
    LE              reduce using rule 62 (FinalExpressionB -> Bool .)
    GT              reduce using rule 62 (FinalExpressionB -> Bool .)
    GE              reduce using rule 62 (FinalExpressionB -> Bool .)
    EQ              reduce using rule 62 (FinalExpressionB -> Bool .)
    NEQ             reduce using rule 62 (FinalExpressionB -> Bool .)
    AND             reduce using rule 62 (FinalExpressionB -> Bool .)
    Then            reduce using rule 62 (FinalExpressionB -> Bool .)
    OR              reduce using rule 62 (FinalExpressionB -> Bool .)
    LBRACKET        reduce using rule 62 (FinalExpressionB -> Bool .)
    RPAREN          reduce using rule 62 (FinalExpressionB -> Bool .)
    COMMA           reduce using rule 62 (FinalExpressionB -> Bool .)
    RSQBRACKET      reduce using rule 62 (FinalExpressionB -> Bool .)
    WriteString     reduce using rule 62 (FinalExpressionB -> Bool .)
    Err             reduce using rule 62 (FinalExpressionB -> Bool .)
    Name            reduce using rule 62 (FinalExpressionB -> Bool .)
    If              reduce using rule 62 (FinalExpressionB -> Bool .)
    While           reduce using rule 62 (FinalExpressionB -> Bool .)
    $end            reduce using rule 62 (FinalExpressionB -> Bool .)
    RBRACKET        reduce using rule 62 (FinalExpressionB -> Bool .)
    DeclEnd         reduce using rule 62 (FinalExpressionB -> Bool .)
    IntDecl         reduce using rule 62 (FinalExpressionB -> Bool .)
    BoolDecl        reduce using rule 62 (FinalExpressionB -> Bool .)
    StringDecl      reduce using rule 62 (FinalExpressionB -> Bool .)


state 44

    (63) FinalExpressionB -> LPAREN . ExpressionB RPAREN
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionB                    shift and go to state 80
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 45

    (69) WhileDo -> While ExpressionB . LBRACKET CommandBlock RBRACKET
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    LBRACKET        shift and go to state 81
    OR              shift and go to state 63


state 46

    (2) DeclBlock -> DeclBegin Vars DeclEnd .

    WriteString     reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Err             reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Name            reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    If              reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    While           reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)


state 47

    (3) Vars -> Vars Var .

    DeclEnd         reduce using rule 3 (Vars -> Vars Var .)
    IntDecl         reduce using rule 3 (Vars -> Vars Var .)
    BoolDecl        reduce using rule 3 (Vars -> Vars Var .)
    StringDecl      reduce using rule 3 (Vars -> Vars Var .)


state 48

    (10) IntVar -> IntDecl Name . Decl ExpressionI
    (11) IntVar -> IntDecl Name .

    Decl            shift and go to state 82
    DeclEnd         reduce using rule 11 (IntVar -> IntDecl Name .)
    IntDecl         reduce using rule 11 (IntVar -> IntDecl Name .)
    BoolDecl        reduce using rule 11 (IntVar -> IntDecl Name .)
    StringDecl      reduce using rule 11 (IntVar -> IntDecl Name .)


state 49

    (16) ArrVar -> IntDecl LSQBRACKET . Integer RSQBRACKET Name
    (17) Arr2Var -> IntDecl LSQBRACKET . Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    Integer         shift and go to state 83


state 50

    (12) BoolVar -> BoolDecl Name . Decl ExpressionB
    (13) BoolVar -> BoolDecl Name .

    Decl            shift and go to state 84
    DeclEnd         reduce using rule 13 (BoolVar -> BoolDecl Name .)
    IntDecl         reduce using rule 13 (BoolVar -> BoolDecl Name .)
    BoolDecl        reduce using rule 13 (BoolVar -> BoolDecl Name .)
    StringDecl      reduce using rule 13 (BoolVar -> BoolDecl Name .)


state 51

    (14) StringVar -> StringDecl Name . Decl String
    (15) StringVar -> StringDecl Name .

    Decl            shift and go to state 85
    DeclEnd         reduce using rule 15 (StringVar -> StringDecl Name .)
    IntDecl         reduce using rule 15 (StringVar -> StringDecl Name .)
    BoolDecl        reduce using rule 15 (StringVar -> StringDecl Name .)
    StringDecl      reduce using rule 15 (StringVar -> StringDecl Name .)


state 52

    (33) Command -> WriteString LPAREN PrintableList . RPAREN
    (31) PrintableList -> PrintableList . COMMA PrintableElem

    RPAREN          shift and go to state 86
    COMMA           shift and go to state 87


state 53

    (32) PrintableList -> PrintableElem .

    RPAREN          reduce using rule 32 (PrintableList -> PrintableElem .)
    COMMA           reduce using rule 32 (PrintableList -> PrintableElem .)


state 54

    (28) PrintableElem -> Name .
    (54) FactorI -> Name . LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (61) FinalExpressionB -> Name .

  ! reduce/reduce conflict for RPAREN resolved using rule 28 (PrintableElem -> Name .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (PrintableElem -> Name .)
    RPAREN          reduce using rule 28 (PrintableElem -> Name .)
    COMMA           reduce using rule 28 (PrintableElem -> Name .)
    LSQBRACKET      shift and go to state 78
    TIMES           reduce using rule 61 (FinalExpressionB -> Name .)
    DIVIDE          reduce using rule 61 (FinalExpressionB -> Name .)
    MOD             reduce using rule 61 (FinalExpressionB -> Name .)
    PLUS            reduce using rule 61 (FinalExpressionB -> Name .)
    MINUS           reduce using rule 61 (FinalExpressionB -> Name .)
    LT              reduce using rule 61 (FinalExpressionB -> Name .)
    LE              reduce using rule 61 (FinalExpressionB -> Name .)
    GT              reduce using rule 61 (FinalExpressionB -> Name .)
    GE              reduce using rule 61 (FinalExpressionB -> Name .)
    EQ              reduce using rule 61 (FinalExpressionB -> Name .)
    NEQ             reduce using rule 61 (FinalExpressionB -> Name .)
    AND             reduce using rule 61 (FinalExpressionB -> Name .)
    OR              reduce using rule 61 (FinalExpressionB -> Name .)

  ! RPAREN          [ reduce using rule 61 (FinalExpressionB -> Name .) ]
  ! COMMA           [ reduce using rule 61 (FinalExpressionB -> Name .) ]


state 55

    (29) PrintableElem -> ExpressionB .
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    RPAREN          reduce using rule 29 (PrintableElem -> ExpressionB .)
    COMMA           reduce using rule 29 (PrintableElem -> ExpressionB .)
    OR              shift and go to state 63


state 56

    (30) PrintableElem -> String .

    RPAREN          reduce using rule 30 (PrintableElem -> String .)
    COMMA           reduce using rule 30 (PrintableElem -> String .)


state 57

    (34) Command -> Err LPAREN String . RPAREN

    RPAREN          shift and go to state 88


state 58

    (21) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (26) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 89
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 59

    (23) Assign -> Name ASSIGN ExpressionB .
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    WriteString     reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    Err             reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    Name            reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    If              reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    While           reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    $end            reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    RBRACKET        reduce using rule 23 (Assign -> Name ASSIGN ExpressionB .)
    OR              shift and go to state 63


state 60

    (24) Assign -> Name ASSIGN String .

    WriteString     reduce using rule 24 (Assign -> Name ASSIGN String .)
    Err             reduce using rule 24 (Assign -> Name ASSIGN String .)
    Name            reduce using rule 24 (Assign -> Name ASSIGN String .)
    If              reduce using rule 24 (Assign -> Name ASSIGN String .)
    While           reduce using rule 24 (Assign -> Name ASSIGN String .)
    $end            reduce using rule 24 (Assign -> Name ASSIGN String .)
    RBRACKET        reduce using rule 24 (Assign -> Name ASSIGN String .)


state 61

    (25) Assign -> Name ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 90


state 62

    (66) IfThenElse -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 91


state 63

    (35) ExpressionB -> ExpressionB OR . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    AndExpressionB                 shift and go to state 92
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 64

    (37) AndExpressionB -> AndExpressionB AND . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    EqExpressionB                  shift and go to state 93
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 65

    (39) EqExpressionB -> EqExpressionB EQ . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    RelExpressionB                 shift and go to state 94
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 66

    (40) EqExpressionB -> EqExpressionB NEQ . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    RelExpressionB                 shift and go to state 95
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 67

    (42) RelExpressionB -> RelExpressionB LT . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 96
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 68

    (43) RelExpressionB -> RelExpressionB LE . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 97
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 69

    (44) RelExpressionB -> RelExpressionB GT . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 98
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 70

    (45) RelExpressionB -> RelExpressionB GE . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 99
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 71

    (47) ExpressionI -> ExpressionI PLUS . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    TermI                          shift and go to state 100
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 72

    (48) ExpressionI -> ExpressionI MINUS . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    TermI                          shift and go to state 101
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 73

    (50) TermI -> TermI TIMES . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    FactorI                        shift and go to state 102
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 74

    (51) TermI -> TermI DIVIDE . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    FactorI                        shift and go to state 103
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 75

    (52) TermI -> TermI MOD . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    FactorI                        shift and go to state 104
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 76

    (58) UnaryExpressionB -> MINUS FinalExpressionB .

    TIMES           reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    DIVIDE          reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    MOD             reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    PLUS            reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    MINUS           reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    LT              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    LE              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    GT              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    GE              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    EQ              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    NEQ             reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    AND             reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    Then            reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    OR              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    LBRACKET        reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    RPAREN          reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    COMMA           reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    RSQBRACKET      reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    WriteString     reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    Err             reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    Name            reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    If              reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    While           reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    $end            reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    RBRACKET        reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    DeclEnd         reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    IntDecl         reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    BoolDecl        reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)
    StringDecl      reduce using rule 58 (UnaryExpressionB -> MINUS FinalExpressionB .)


state 77

    (61) FinalExpressionB -> Name .

    TIMES           reduce using rule 61 (FinalExpressionB -> Name .)
    DIVIDE          reduce using rule 61 (FinalExpressionB -> Name .)
    MOD             reduce using rule 61 (FinalExpressionB -> Name .)
    PLUS            reduce using rule 61 (FinalExpressionB -> Name .)
    MINUS           reduce using rule 61 (FinalExpressionB -> Name .)
    LT              reduce using rule 61 (FinalExpressionB -> Name .)
    LE              reduce using rule 61 (FinalExpressionB -> Name .)
    GT              reduce using rule 61 (FinalExpressionB -> Name .)
    GE              reduce using rule 61 (FinalExpressionB -> Name .)
    EQ              reduce using rule 61 (FinalExpressionB -> Name .)
    NEQ             reduce using rule 61 (FinalExpressionB -> Name .)
    AND             reduce using rule 61 (FinalExpressionB -> Name .)
    Then            reduce using rule 61 (FinalExpressionB -> Name .)
    OR              reduce using rule 61 (FinalExpressionB -> Name .)
    LBRACKET        reduce using rule 61 (FinalExpressionB -> Name .)
    RPAREN          reduce using rule 61 (FinalExpressionB -> Name .)
    COMMA           reduce using rule 61 (FinalExpressionB -> Name .)
    RSQBRACKET      reduce using rule 61 (FinalExpressionB -> Name .)
    WriteString     reduce using rule 61 (FinalExpressionB -> Name .)
    Err             reduce using rule 61 (FinalExpressionB -> Name .)
    Name            reduce using rule 61 (FinalExpressionB -> Name .)
    If              reduce using rule 61 (FinalExpressionB -> Name .)
    While           reduce using rule 61 (FinalExpressionB -> Name .)
    $end            reduce using rule 61 (FinalExpressionB -> Name .)
    RBRACKET        reduce using rule 61 (FinalExpressionB -> Name .)
    DeclEnd         reduce using rule 61 (FinalExpressionB -> Name .)
    IntDecl         reduce using rule 61 (FinalExpressionB -> Name .)
    BoolDecl        reduce using rule 61 (FinalExpressionB -> Name .)
    StringDecl      reduce using rule 61 (FinalExpressionB -> Name .)


state 78

    (54) FactorI -> Name LSQBRACKET . ExpressionI RSQBRACKET
    (55) FactorI -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 105
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 79

    (57) UnaryExpressionB -> NOT FinalExpressionB .

    TIMES           reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    DIVIDE          reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    MOD             reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    PLUS            reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    MINUS           reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    LT              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    LE              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    GT              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    GE              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    EQ              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    NEQ             reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    AND             reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    Then            reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    OR              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    LBRACKET        reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    RPAREN          reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    COMMA           reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    RSQBRACKET      reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    WriteString     reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    Err             reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    Name            reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    If              reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    While           reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    $end            reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    RBRACKET        reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    DeclEnd         reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    IntDecl         reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    BoolDecl        reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)
    StringDecl      reduce using rule 57 (UnaryExpressionB -> NOT FinalExpressionB .)


state 80

    (63) FinalExpressionB -> LPAREN ExpressionB . RPAREN
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    RPAREN          shift and go to state 106
    OR              shift and go to state 63


state 81

    (69) WhileDo -> While ExpressionB LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 107
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 82

    (10) IntVar -> IntDecl Name Decl . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 108
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 83

    (16) ArrVar -> IntDecl LSQBRACKET Integer . RSQBRACKET Name
    (17) Arr2Var -> IntDecl LSQBRACKET Integer . RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    RSQBRACKET      shift and go to state 109


state 84

    (12) BoolVar -> BoolDecl Name Decl . ExpressionB
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionB                    shift and go to state 110
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 85

    (14) StringVar -> StringDecl Name Decl . String

    String          shift and go to state 111


state 86

    (33) Command -> WriteString LPAREN PrintableList RPAREN .

    WriteString     reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Err             reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Name            reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    If              reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    While           reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    $end            reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    RBRACKET        reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)


state 87

    (31) PrintableList -> PrintableList COMMA . PrintableElem
    (28) PrintableElem -> . Name
    (29) PrintableElem -> . ExpressionB
    (30) PrintableElem -> . String
    (35) ExpressionB -> . ExpressionB OR AndExpressionB
    (36) ExpressionB -> . AndExpressionB
    (37) AndExpressionB -> . AndExpressionB AND EqExpressionB
    (38) AndExpressionB -> . EqExpressionB
    (39) EqExpressionB -> . EqExpressionB EQ RelExpressionB
    (40) EqExpressionB -> . EqExpressionB NEQ RelExpressionB
    (41) EqExpressionB -> . RelExpressionB
    (42) RelExpressionB -> . RelExpressionB LT ExpressionI
    (43) RelExpressionB -> . RelExpressionB LE ExpressionI
    (44) RelExpressionB -> . RelExpressionB GT ExpressionI
    (45) RelExpressionB -> . RelExpressionB GE ExpressionI
    (46) RelExpressionB -> . ExpressionI
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 54
    String          shift and go to state 56
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    PrintableElem                  shift and go to state 112
    ExpressionB                    shift and go to state 55
    AndExpressionB                 shift and go to state 31
    EqExpressionB                  shift and go to state 32
    RelExpressionB                 shift and go to state 33
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 88

    (34) Command -> Err LPAREN String RPAREN .

    WriteString     reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    Err             reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    Name            reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    If              reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    While           reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    $end            reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    RBRACKET        reduce using rule 34 (Command -> Err LPAREN String RPAREN .)


state 89

    (21) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ExpressionI
    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (26) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 114
    LSQBRACKET      shift and go to state 113


state 90

    (25) Assign -> Name ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 115


state 91

    (66) IfThenElse -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 116
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 92

    (35) ExpressionB -> ExpressionB OR AndExpressionB .
    (37) AndExpressionB -> AndExpressionB . AND EqExpressionB

    Then            reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    OR              reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    LBRACKET        reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    RPAREN          reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    COMMA           reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    WriteString     reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    Err             reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    Name            reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    If              reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    While           reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    $end            reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    RBRACKET        reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    DeclEnd         reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    IntDecl         reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    BoolDecl        reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    StringDecl      reduce using rule 35 (ExpressionB -> ExpressionB OR AndExpressionB .)
    AND             shift and go to state 64


state 93

    (37) AndExpressionB -> AndExpressionB AND EqExpressionB .
    (39) EqExpressionB -> EqExpressionB . EQ RelExpressionB
    (40) EqExpressionB -> EqExpressionB . NEQ RelExpressionB

    AND             reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    Then            reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    OR              reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    LBRACKET        reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    RPAREN          reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    COMMA           reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    WriteString     reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    Err             reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    Name            reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    If              reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    While           reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    $end            reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    RBRACKET        reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    DeclEnd         reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    IntDecl         reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    BoolDecl        reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    StringDecl      reduce using rule 37 (AndExpressionB -> AndExpressionB AND EqExpressionB .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66


state 94

    (39) EqExpressionB -> EqExpressionB EQ RelExpressionB .
    (42) RelExpressionB -> RelExpressionB . LT ExpressionI
    (43) RelExpressionB -> RelExpressionB . LE ExpressionI
    (44) RelExpressionB -> RelExpressionB . GT ExpressionI
    (45) RelExpressionB -> RelExpressionB . GE ExpressionI

    EQ              reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    NEQ             reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    AND             reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    Then            reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    OR              reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    LBRACKET        reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    RPAREN          reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    COMMA           reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    WriteString     reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    Err             reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    Name            reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    If              reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    While           reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    $end            reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    RBRACKET        reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    DeclEnd         reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    IntDecl         reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    BoolDecl        reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    StringDecl      reduce using rule 39 (EqExpressionB -> EqExpressionB EQ RelExpressionB .)
    LT              shift and go to state 67
    LE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70


state 95

    (40) EqExpressionB -> EqExpressionB NEQ RelExpressionB .
    (42) RelExpressionB -> RelExpressionB . LT ExpressionI
    (43) RelExpressionB -> RelExpressionB . LE ExpressionI
    (44) RelExpressionB -> RelExpressionB . GT ExpressionI
    (45) RelExpressionB -> RelExpressionB . GE ExpressionI

    EQ              reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    NEQ             reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    AND             reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    Then            reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    OR              reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    LBRACKET        reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    RPAREN          reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    COMMA           reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    WriteString     reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    Err             reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    Name            reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    If              reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    While           reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    $end            reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    RBRACKET        reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    DeclEnd         reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    IntDecl         reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    BoolDecl        reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    StringDecl      reduce using rule 40 (EqExpressionB -> EqExpressionB NEQ RelExpressionB .)
    LT              shift and go to state 67
    LE              shift and go to state 68
    GT              shift and go to state 69
    GE              shift and go to state 70


state 96

    (42) RelExpressionB -> RelExpressionB LT ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    LT              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    LE              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    GT              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    GE              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    EQ              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    NEQ             reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    AND             reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    Then            reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    OR              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    LBRACKET        reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    RPAREN          reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    COMMA           reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    WriteString     reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    Err             reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    Name            reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    If              reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    While           reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    $end            reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    RBRACKET        reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    DeclEnd         reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    IntDecl         reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    BoolDecl        reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    StringDecl      reduce using rule 42 (RelExpressionB -> RelExpressionB LT ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 97

    (43) RelExpressionB -> RelExpressionB LE ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    LT              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    LE              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    GT              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    GE              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    EQ              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    NEQ             reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    AND             reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    Then            reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    OR              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    LBRACKET        reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    RPAREN          reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    COMMA           reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    WriteString     reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    Err             reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    Name            reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    If              reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    While           reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    $end            reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    RBRACKET        reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    DeclEnd         reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    IntDecl         reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    BoolDecl        reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    StringDecl      reduce using rule 43 (RelExpressionB -> RelExpressionB LE ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 98

    (44) RelExpressionB -> RelExpressionB GT ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    LT              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    LE              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    GT              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    GE              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    EQ              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    NEQ             reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    AND             reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    Then            reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    OR              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    LBRACKET        reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    RPAREN          reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    COMMA           reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    WriteString     reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    Err             reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    Name            reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    If              reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    While           reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    $end            reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    RBRACKET        reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    DeclEnd         reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    IntDecl         reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    BoolDecl        reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    StringDecl      reduce using rule 44 (RelExpressionB -> RelExpressionB GT ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 99

    (45) RelExpressionB -> RelExpressionB GE ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    LT              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    LE              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    GT              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    GE              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    EQ              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    NEQ             reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    AND             reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    Then            reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    OR              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    LBRACKET        reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    RPAREN          reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    COMMA           reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    WriteString     reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    Err             reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    Name            reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    If              reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    While           reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    $end            reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    RBRACKET        reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    DeclEnd         reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    IntDecl         reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    BoolDecl        reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    StringDecl      reduce using rule 45 (RelExpressionB -> RelExpressionB GE ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 100

    (47) ExpressionI -> ExpressionI PLUS TermI .
    (50) TermI -> TermI . TIMES FactorI
    (51) TermI -> TermI . DIVIDE FactorI
    (52) TermI -> TermI . MOD FactorI

    PLUS            reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    MINUS           reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    LT              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    LE              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    GT              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    GE              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    EQ              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    NEQ             reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    AND             reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    Then            reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    OR              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    LBRACKET        reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    RPAREN          reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    COMMA           reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    RSQBRACKET      reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    WriteString     reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    Err             reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    Name            reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    If              reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    While           reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    $end            reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    RBRACKET        reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    DeclEnd         reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    IntDecl         reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    BoolDecl        reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    StringDecl      reduce using rule 47 (ExpressionI -> ExpressionI PLUS TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 101

    (48) ExpressionI -> ExpressionI MINUS TermI .
    (50) TermI -> TermI . TIMES FactorI
    (51) TermI -> TermI . DIVIDE FactorI
    (52) TermI -> TermI . MOD FactorI

    PLUS            reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    MINUS           reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    LT              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    LE              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    GT              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    GE              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    EQ              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    NEQ             reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    AND             reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    Then            reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    OR              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    LBRACKET        reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    RPAREN          reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    COMMA           reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    RSQBRACKET      reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    WriteString     reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    Err             reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    Name            reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    If              reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    While           reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    $end            reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    RBRACKET        reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    DeclEnd         reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    IntDecl         reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    BoolDecl        reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    StringDecl      reduce using rule 48 (ExpressionI -> ExpressionI MINUS TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 102

    (50) TermI -> TermI TIMES FactorI .

    TIMES           reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    DIVIDE          reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    MOD             reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    PLUS            reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    MINUS           reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    LT              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    LE              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    GT              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    GE              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    EQ              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    NEQ             reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    AND             reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    Then            reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    OR              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    LBRACKET        reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    RPAREN          reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    COMMA           reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    RSQBRACKET      reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    WriteString     reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    Err             reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    Name            reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    If              reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    While           reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    $end            reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    RBRACKET        reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    DeclEnd         reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    IntDecl         reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    BoolDecl        reduce using rule 50 (TermI -> TermI TIMES FactorI .)
    StringDecl      reduce using rule 50 (TermI -> TermI TIMES FactorI .)


state 103

    (51) TermI -> TermI DIVIDE FactorI .

    TIMES           reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    DIVIDE          reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    MOD             reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    PLUS            reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    MINUS           reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    LT              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    LE              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    GT              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    GE              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    EQ              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    NEQ             reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    AND             reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    Then            reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    OR              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    LBRACKET        reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    RPAREN          reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    COMMA           reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    RSQBRACKET      reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    WriteString     reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    Err             reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    Name            reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    If              reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    While           reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    $end            reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    RBRACKET        reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    DeclEnd         reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    IntDecl         reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    BoolDecl        reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)
    StringDecl      reduce using rule 51 (TermI -> TermI DIVIDE FactorI .)


state 104

    (52) TermI -> TermI MOD FactorI .

    TIMES           reduce using rule 52 (TermI -> TermI MOD FactorI .)
    DIVIDE          reduce using rule 52 (TermI -> TermI MOD FactorI .)
    MOD             reduce using rule 52 (TermI -> TermI MOD FactorI .)
    PLUS            reduce using rule 52 (TermI -> TermI MOD FactorI .)
    MINUS           reduce using rule 52 (TermI -> TermI MOD FactorI .)
    LT              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    LE              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    GT              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    GE              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    EQ              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    NEQ             reduce using rule 52 (TermI -> TermI MOD FactorI .)
    AND             reduce using rule 52 (TermI -> TermI MOD FactorI .)
    Then            reduce using rule 52 (TermI -> TermI MOD FactorI .)
    OR              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    LBRACKET        reduce using rule 52 (TermI -> TermI MOD FactorI .)
    RPAREN          reduce using rule 52 (TermI -> TermI MOD FactorI .)
    COMMA           reduce using rule 52 (TermI -> TermI MOD FactorI .)
    RSQBRACKET      reduce using rule 52 (TermI -> TermI MOD FactorI .)
    WriteString     reduce using rule 52 (TermI -> TermI MOD FactorI .)
    Err             reduce using rule 52 (TermI -> TermI MOD FactorI .)
    Name            reduce using rule 52 (TermI -> TermI MOD FactorI .)
    If              reduce using rule 52 (TermI -> TermI MOD FactorI .)
    While           reduce using rule 52 (TermI -> TermI MOD FactorI .)
    $end            reduce using rule 52 (TermI -> TermI MOD FactorI .)
    RBRACKET        reduce using rule 52 (TermI -> TermI MOD FactorI .)
    DeclEnd         reduce using rule 52 (TermI -> TermI MOD FactorI .)
    IntDecl         reduce using rule 52 (TermI -> TermI MOD FactorI .)
    BoolDecl        reduce using rule 52 (TermI -> TermI MOD FactorI .)
    StringDecl      reduce using rule 52 (TermI -> TermI MOD FactorI .)


state 105

    (54) FactorI -> Name LSQBRACKET ExpressionI . RSQBRACKET
    (55) FactorI -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 117
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 106

    (63) FinalExpressionB -> LPAREN ExpressionB RPAREN .

    TIMES           reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    DIVIDE          reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    MOD             reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    PLUS            reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    MINUS           reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    LT              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    LE              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    GT              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    GE              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    EQ              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    NEQ             reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    AND             reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    Then            reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    OR              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    LBRACKET        reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    RPAREN          reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    COMMA           reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    RSQBRACKET      reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    WriteString     reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    Err             reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    Name            reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    If              reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    While           reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    $end            reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    RBRACKET        reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    DeclEnd         reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    IntDecl         reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    BoolDecl        reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)
    StringDecl      reduce using rule 63 (FinalExpressionB -> LPAREN ExpressionB RPAREN .)


state 107

    (69) WhileDo -> While ExpressionB LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 118
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 108

    (10) IntVar -> IntDecl Name Decl ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    DeclEnd         reduce using rule 10 (IntVar -> IntDecl Name Decl ExpressionI .)
    IntDecl         reduce using rule 10 (IntVar -> IntDecl Name Decl ExpressionI .)
    BoolDecl        reduce using rule 10 (IntVar -> IntDecl Name Decl ExpressionI .)
    StringDecl      reduce using rule 10 (IntVar -> IntDecl Name Decl ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 109

    (16) ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET . Name
    (17) Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET . LSQBRACKET Integer RSQBRACKET Name

    Name            shift and go to state 120
    LSQBRACKET      shift and go to state 119


state 110

    (12) BoolVar -> BoolDecl Name Decl ExpressionB .
    (35) ExpressionB -> ExpressionB . OR AndExpressionB

    DeclEnd         reduce using rule 12 (BoolVar -> BoolDecl Name Decl ExpressionB .)
    IntDecl         reduce using rule 12 (BoolVar -> BoolDecl Name Decl ExpressionB .)
    BoolDecl        reduce using rule 12 (BoolVar -> BoolDecl Name Decl ExpressionB .)
    StringDecl      reduce using rule 12 (BoolVar -> BoolDecl Name Decl ExpressionB .)
    OR              shift and go to state 63


state 111

    (14) StringVar -> StringDecl Name Decl String .

    DeclEnd         reduce using rule 14 (StringVar -> StringDecl Name Decl String .)
    IntDecl         reduce using rule 14 (StringVar -> StringDecl Name Decl String .)
    BoolDecl        reduce using rule 14 (StringVar -> StringDecl Name Decl String .)
    StringDecl      reduce using rule 14 (StringVar -> StringDecl Name Decl String .)


state 112

    (31) PrintableList -> PrintableList COMMA PrintableElem .

    RPAREN          reduce using rule 31 (PrintableList -> PrintableList COMMA PrintableElem .)
    COMMA           reduce using rule 31 (PrintableList -> PrintableList COMMA PrintableElem .)


state 113

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 121
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 114

    (21) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ExpressionI
    (26) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ReadString LPAREN RPAREN
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    ReadString      shift and go to state 123
    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 122
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 115

    (25) Assign -> Name ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 25 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)


state 116

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 124
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 117

    (54) FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .
    (55) FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET

    TIMES           reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    DIVIDE          reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    MOD             reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    PLUS            reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    MINUS           reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LT              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LE              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    GT              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    GE              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    EQ              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    NEQ             reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    AND             reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Then            reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    OR              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LBRACKET        reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RPAREN          reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    COMMA           reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RSQBRACKET      reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    WriteString     reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Err             reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Name            reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    If              reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    While           reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    $end            reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RBRACKET        reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    DeclEnd         reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    IntDecl         reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    BoolDecl        reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    StringDecl      reduce using rule 54 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LSQBRACKET      shift and go to state 125


state 118

    (69) WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 69 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)


state 119

    (17) Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET . Integer RSQBRACKET Name

    Integer         shift and go to state 126


state 120

    (16) ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .

    DeclEnd         reduce using rule 16 (ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    IntDecl         reduce using rule 16 (ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    BoolDecl        reduce using rule 16 (ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    StringDecl      reduce using rule 16 (ArrVar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)


state 121

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 127
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 122

    (21) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    WriteString     reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Err             reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Name            reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    If              reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    While           reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    $end            reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 21 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 123

    (26) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 128


state 124

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET . Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .

    Else            shift and go to state 129
    WriteString     reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 67 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)


state 125

    (55) FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 130
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 126

    (17) Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer . RSQBRACKET Name

    RSQBRACKET      shift and go to state 131


state 127

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 132


state 128

    (26) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 133


state 129

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 134


state 130

    (55) FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 135
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 131

    (17) Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET . Name

    Name            shift and go to state 136


state 132

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ReadString LPAREN RPAREN
    (47) ExpressionI -> . ExpressionI PLUS TermI
    (48) ExpressionI -> . ExpressionI MINUS TermI
    (49) ExpressionI -> . TermI
    (50) TermI -> . TermI TIMES FactorI
    (51) TermI -> . TermI DIVIDE FactorI
    (52) TermI -> . TermI MOD FactorI
    (53) TermI -> . FactorI
    (54) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (55) FactorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (56) FactorI -> . UnaryExpressionB
    (57) UnaryExpressionB -> . NOT FinalExpressionB
    (58) UnaryExpressionB -> . MINUS FinalExpressionB
    (59) UnaryExpressionB -> . FinalExpressionB
    (60) FinalExpressionB -> . Integer
    (61) FinalExpressionB -> . Name
    (62) FinalExpressionB -> . Bool
    (63) FinalExpressionB -> . LPAREN ExpressionB RPAREN

    ReadString      shift and go to state 138
    Name            shift and go to state 38
    NOT             shift and go to state 40
    MINUS           shift and go to state 36
    Integer         shift and go to state 42
    Bool            shift and go to state 43
    LPAREN          shift and go to state 44

    ExpressionI                    shift and go to state 137
    TermI                          shift and go to state 35
    FactorI                        shift and go to state 37
    UnaryExpressionB               shift and go to state 39
    FinalExpressionB               shift and go to state 41

state 133

    (26) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 26 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)


state 134

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 139
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 135

    (55) FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .

    TIMES           reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    DIVIDE          reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    MOD             reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    PLUS            reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    MINUS           reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LT              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LE              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    GT              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    GE              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    EQ              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    NEQ             reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    AND             reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Then            reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    OR              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LBRACKET        reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RPAREN          reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    COMMA           reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RSQBRACKET      reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    WriteString     reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Err             reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Name            reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    If              reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    While           reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    $end            reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RBRACKET        reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    DeclEnd         reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    IntDecl         reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    BoolDecl        reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    StringDecl      reduce using rule 55 (FactorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)


state 136

    (17) Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .

    DeclEnd         reduce using rule 17 (Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    IntDecl         reduce using rule 17 (Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    BoolDecl        reduce using rule 17 (Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    StringDecl      reduce using rule 17 (Arr2Var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)


state 137

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .
    (47) ExpressionI -> ExpressionI . PLUS TermI
    (48) ExpressionI -> ExpressionI . MINUS TermI

    WriteString     reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Err             reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Name            reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    If              reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    While           reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    $end            reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 138

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 140


state 139

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (64) Command -> . IfThenElse
    (65) Command -> . IfThen
    (68) Command -> . WhileDo
    (21) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name ASSIGN ExpressionB
    (24) Assign -> . Name ASSIGN String
    (25) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (26) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (66) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (67) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (69) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 141
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 140

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 142


state 141

    (66) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 66 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)


state 142

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 54 resolved using rule (PrintableElem -> Name)
WARNING: rejected rule (FinalExpressionB -> Name) in state 54
