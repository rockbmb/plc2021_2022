Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> DeclBlock CommandBlock
Rule 2     DeclBlock -> DeclBegin Vars DeclEnd
Rule 3     Vars -> Vars Var
Rule 4     Vars -> Var
Rule 5     Var -> intvar
Rule 6     Var -> boolvar
Rule 7     Var -> stringvar
Rule 8     Var -> arrvar
Rule 9     Var -> arr2var
Rule 10    intvar -> IntDecl Name Decl ExpressionI
Rule 11    intvar -> IntDecl Name
Rule 12    boolvar -> BoolDecl Name Decl Bool
Rule 13    boolvar -> BoolDecl Name
Rule 14    stringvar -> StringDecl Name Decl String
Rule 15    stringvar -> StringDecl Name
Rule 16    arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name
Rule 17    arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name
Rule 18    CommandBlock -> CommandBlock Command
Rule 19    CommandBlock -> Command
Rule 20    Command -> Assign
Rule 21    Assign -> Name ASSIGN ExpressionI
Rule 22    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
Rule 23    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
Rule 24    Assign -> Name ASSIGN ExpressionB
Rule 25    Assign -> Name ASSIGN String
Rule 26    Assign -> Name ASSIGN ReadString LPAREN RPAREN
Rule 27    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
Rule 28    PrintableElem -> ExpressionI
Rule 29    PrintableElem -> ExpressionB
Rule 30    PrintableElem -> String
Rule 31    PrintableList -> PrintableList COMMA PrintableElem
Rule 32    PrintableList -> PrintableElem
Rule 33    Command -> WriteString LPAREN PrintableList RPAREN
Rule 34    Command -> Err LPAREN String RPAREN
Rule 35    ExpressionI -> ExpressionI PLUS TermI
Rule 36    ExpressionI -> ExpressionI MINUS TermI
Rule 37    ExpressionI -> TermI
Rule 38    TermI -> TermI TIMES factorI
Rule 39    TermI -> TermI DIVIDE factorI
Rule 40    TermI -> TermI MOD factorI
Rule 41    TermI -> factorI
Rule 42    factorI -> Integer
Rule 43    factorI -> Name
Rule 44    factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
Rule 45    factorI -> LPAREN ExpressionI RPAREN
Rule 46    factorI -> MINUS LPAREN ExpressionI RPAREN
Rule 47    factorI -> MINUS Integer
Rule 48    ExpressionB -> Bool
Rule 49    ExpressionB -> ExpressionB AND ExpressionB
Rule 50    ExpressionB -> ExpressionB OR ExpressionB
Rule 51    ExpressionB -> NOT LPAREN ExpressionB RPAREN
Rule 52    ExpressionB -> LPAREN ExpressionB RPAREN
Rule 53    ExpressionB -> ExpressionI LT ExpressionI
Rule 54    ExpressionB -> ExpressionI LE ExpressionI
Rule 55    ExpressionB -> ExpressionI GT ExpressionI
Rule 56    ExpressionB -> ExpressionI GE ExpressionI
Rule 57    ExpressionB -> ExpressionI EQ ExpressionI
Rule 58    ExpressionB -> ExpressionI NEQ ExpressionI
Rule 59    Command -> IfThenElse
Rule 60    Command -> IfThen
Rule 61    IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
Rule 62    IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET
Rule 63    Command -> WhileDo
Rule 64    WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 21 22 23 24 25 26 27
Bool                 : 12 48
BoolDecl             : 12 13
COMMA                : 31
DIVIDE               : 39
Decl                 : 10 12 14
DeclBegin            : 2
DeclEnd              : 2
EQ                   : 57
Else                 : 61
Err                  : 34
GE                   : 56
GT                   : 55
If                   : 61 62
IntDecl              : 10 11 16 17
Integer              : 16 17 17 42 47
LBRACKET             : 61 61 62 64
LE                   : 54
LPAREN               : 26 27 33 34 45 46 51 52
LSQBRACKET           : 16 17 17 22 23 23 27 27 44 44
LT                   : 53
MINUS                : 36 46 47
MOD                  : 40
NEQ                  : 58
NOT                  : 51
Name                 : 10 11 12 13 14 15 16 17 21 22 23 24 25 26 27 43 44
OR                   : 50
PLUS                 : 35
RBRACKET             : 61 61 62 64
RPAREN               : 26 27 33 34 45 46 51 52
RSQBRACKET           : 16 17 17 22 23 23 27 27 44 44
ReadString           : 26 27
String               : 14 25 30 34
StringDecl           : 14 15
TIMES                : 38
Then                 : 61 62
While                : 64
WriteString          : 33
error                : 

Nonterminals, with rules where they appear

Assign               : 20
Command              : 18 19
CommandBlock         : 1 18 61 61 62 64
DeclBlock            : 1
ExpressionB          : 24 29 49 49 50 50 51 52 61 62 64
ExpressionI          : 10 21 22 22 23 23 23 27 27 28 35 36 44 44 45 46 53 53 54 54 55 55 56 56 57 57 58 58
IfThen               : 60
IfThenElse           : 59
PrintableElem        : 31 32
PrintableList        : 31 33
Program              : 0
TermI                : 35 36 37 38 39 40
Var                  : 3 4
Vars                 : 2 3
WhileDo              : 63
arr2var              : 9
arrvar               : 8
boolvar              : 6
factorI              : 38 39 40 41
intvar               : 5
stringvar            : 7

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . DeclBlock CommandBlock
    (2) DeclBlock -> . DeclBegin Vars DeclEnd

    DeclBegin       shift and go to state 3

    Program                        shift and go to state 1
    DeclBlock                      shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> DeclBlock . CommandBlock
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 4
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 3

    (2) DeclBlock -> DeclBegin . Vars DeclEnd
    (3) Vars -> . Vars Var
    (4) Vars -> . Var
    (5) Var -> . intvar
    (6) Var -> . boolvar
    (7) Var -> . stringvar
    (8) Var -> . arrvar
    (9) Var -> . arr2var
    (10) intvar -> . IntDecl Name Decl ExpressionI
    (11) intvar -> . IntDecl Name
    (12) boolvar -> . BoolDecl Name Decl Bool
    (13) boolvar -> . BoolDecl Name
    (14) stringvar -> . StringDecl Name Decl String
    (15) stringvar -> . StringDecl Name
    (16) arrvar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name
    (17) arr2var -> . IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    IntDecl         shift and go to state 22
    BoolDecl        shift and go to state 23
    StringDecl      shift and go to state 24

    Vars                           shift and go to state 15
    Var                            shift and go to state 16
    intvar                         shift and go to state 17
    boolvar                        shift and go to state 18
    stringvar                      shift and go to state 19
    arrvar                         shift and go to state 20
    arr2var                        shift and go to state 21

state 4

    (1) Program -> DeclBlock CommandBlock .
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    $end            reduce using rule 1 (Program -> DeclBlock CommandBlock .)
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 5

    (19) CommandBlock -> Command .

    WriteString     reduce using rule 19 (CommandBlock -> Command .)
    Err             reduce using rule 19 (CommandBlock -> Command .)
    Name            reduce using rule 19 (CommandBlock -> Command .)
    If              reduce using rule 19 (CommandBlock -> Command .)
    While           reduce using rule 19 (CommandBlock -> Command .)
    $end            reduce using rule 19 (CommandBlock -> Command .)
    RBRACKET        reduce using rule 19 (CommandBlock -> Command .)


state 6

    (20) Command -> Assign .

    WriteString     reduce using rule 20 (Command -> Assign .)
    Err             reduce using rule 20 (Command -> Assign .)
    Name            reduce using rule 20 (Command -> Assign .)
    If              reduce using rule 20 (Command -> Assign .)
    While           reduce using rule 20 (Command -> Assign .)
    $end            reduce using rule 20 (Command -> Assign .)
    RBRACKET        reduce using rule 20 (Command -> Assign .)


state 7

    (33) Command -> WriteString . LPAREN PrintableList RPAREN

    LPAREN          shift and go to state 26


state 8

    (34) Command -> Err . LPAREN String RPAREN

    LPAREN          shift and go to state 27


state 9

    (59) Command -> IfThenElse .

    WriteString     reduce using rule 59 (Command -> IfThenElse .)
    Err             reduce using rule 59 (Command -> IfThenElse .)
    Name            reduce using rule 59 (Command -> IfThenElse .)
    If              reduce using rule 59 (Command -> IfThenElse .)
    While           reduce using rule 59 (Command -> IfThenElse .)
    $end            reduce using rule 59 (Command -> IfThenElse .)
    RBRACKET        reduce using rule 59 (Command -> IfThenElse .)


state 10

    (60) Command -> IfThen .

    WriteString     reduce using rule 60 (Command -> IfThen .)
    Err             reduce using rule 60 (Command -> IfThen .)
    Name            reduce using rule 60 (Command -> IfThen .)
    If              reduce using rule 60 (Command -> IfThen .)
    While           reduce using rule 60 (Command -> IfThen .)
    $end            reduce using rule 60 (Command -> IfThen .)
    RBRACKET        reduce using rule 60 (Command -> IfThen .)


state 11

    (63) Command -> WhileDo .

    WriteString     reduce using rule 63 (Command -> WhileDo .)
    Err             reduce using rule 63 (Command -> WhileDo .)
    Name            reduce using rule 63 (Command -> WhileDo .)
    If              reduce using rule 63 (Command -> WhileDo .)
    While           reduce using rule 63 (Command -> WhileDo .)
    $end            reduce using rule 63 (Command -> WhileDo .)
    RBRACKET        reduce using rule 63 (Command -> WhileDo .)


state 12

    (21) Assign -> Name . ASSIGN ExpressionI
    (22) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> Name . ASSIGN ExpressionB
    (25) Assign -> Name . ASSIGN String
    (26) Assign -> Name . ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 28
    LSQBRACKET      shift and go to state 29


state 13

    (61) IfThenElse -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 30
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 14

    (64) WhileDo -> While . ExpressionB LBRACKET CommandBlock RBRACKET
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 40
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 15

    (2) DeclBlock -> DeclBegin Vars . DeclEnd
    (3) Vars -> Vars . Var
    (5) Var -> . intvar
    (6) Var -> . boolvar
    (7) Var -> . stringvar
    (8) Var -> . arrvar
    (9) Var -> . arr2var
    (10) intvar -> . IntDecl Name Decl ExpressionI
    (11) intvar -> . IntDecl Name
    (12) boolvar -> . BoolDecl Name Decl Bool
    (13) boolvar -> . BoolDecl Name
    (14) stringvar -> . StringDecl Name Decl String
    (15) stringvar -> . StringDecl Name
    (16) arrvar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name
    (17) arr2var -> . IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    DeclEnd         shift and go to state 41
    IntDecl         shift and go to state 22
    BoolDecl        shift and go to state 23
    StringDecl      shift and go to state 24

    Var                            shift and go to state 42
    intvar                         shift and go to state 17
    boolvar                        shift and go to state 18
    stringvar                      shift and go to state 19
    arrvar                         shift and go to state 20
    arr2var                        shift and go to state 21

state 16

    (4) Vars -> Var .

    DeclEnd         reduce using rule 4 (Vars -> Var .)
    IntDecl         reduce using rule 4 (Vars -> Var .)
    BoolDecl        reduce using rule 4 (Vars -> Var .)
    StringDecl      reduce using rule 4 (Vars -> Var .)


state 17

    (5) Var -> intvar .

    DeclEnd         reduce using rule 5 (Var -> intvar .)
    IntDecl         reduce using rule 5 (Var -> intvar .)
    BoolDecl        reduce using rule 5 (Var -> intvar .)
    StringDecl      reduce using rule 5 (Var -> intvar .)


state 18

    (6) Var -> boolvar .

    DeclEnd         reduce using rule 6 (Var -> boolvar .)
    IntDecl         reduce using rule 6 (Var -> boolvar .)
    BoolDecl        reduce using rule 6 (Var -> boolvar .)
    StringDecl      reduce using rule 6 (Var -> boolvar .)


state 19

    (7) Var -> stringvar .

    DeclEnd         reduce using rule 7 (Var -> stringvar .)
    IntDecl         reduce using rule 7 (Var -> stringvar .)
    BoolDecl        reduce using rule 7 (Var -> stringvar .)
    StringDecl      reduce using rule 7 (Var -> stringvar .)


state 20

    (8) Var -> arrvar .

    DeclEnd         reduce using rule 8 (Var -> arrvar .)
    IntDecl         reduce using rule 8 (Var -> arrvar .)
    BoolDecl        reduce using rule 8 (Var -> arrvar .)
    StringDecl      reduce using rule 8 (Var -> arrvar .)


state 21

    (9) Var -> arr2var .

    DeclEnd         reduce using rule 9 (Var -> arr2var .)
    IntDecl         reduce using rule 9 (Var -> arr2var .)
    BoolDecl        reduce using rule 9 (Var -> arr2var .)
    StringDecl      reduce using rule 9 (Var -> arr2var .)


state 22

    (10) intvar -> IntDecl . Name Decl ExpressionI
    (11) intvar -> IntDecl . Name
    (16) arrvar -> IntDecl . LSQBRACKET Integer RSQBRACKET Name
    (17) arr2var -> IntDecl . LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    Name            shift and go to state 43
    LSQBRACKET      shift and go to state 44


state 23

    (12) boolvar -> BoolDecl . Name Decl Bool
    (13) boolvar -> BoolDecl . Name

    Name            shift and go to state 45


state 24

    (14) stringvar -> StringDecl . Name Decl String
    (15) stringvar -> StringDecl . Name

    Name            shift and go to state 46


state 25

    (18) CommandBlock -> CommandBlock Command .

    WriteString     reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    Err             reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    Name            reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    If              reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    While           reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    $end            reduce using rule 18 (CommandBlock -> CommandBlock Command .)
    RBRACKET        reduce using rule 18 (CommandBlock -> CommandBlock Command .)


state 26

    (33) Command -> WriteString LPAREN . PrintableList RPAREN
    (31) PrintableList -> . PrintableList COMMA PrintableElem
    (32) PrintableList -> . PrintableElem
    (28) PrintableElem -> . ExpressionI
    (29) PrintableElem -> . ExpressionB
    (30) PrintableElem -> . String
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    String          shift and go to state 51
    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    PrintableList                  shift and go to state 47
    PrintableElem                  shift and go to state 48
    ExpressionI                    shift and go to state 49
    ExpressionB                    shift and go to state 50
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 27

    (34) Command -> Err LPAREN . String RPAREN

    String          shift and go to state 52


state 28

    (21) Assign -> Name ASSIGN . ExpressionI
    (24) Assign -> Name ASSIGN . ExpressionB
    (25) Assign -> Name ASSIGN . String
    (26) Assign -> Name ASSIGN . ReadString LPAREN RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    String          shift and go to state 55
    ReadString      shift and go to state 56
    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 53
    ExpressionB                    shift and go to state 54
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 29

    (22) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 57
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 30

    (61) IfThenElse -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    Then            shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61


state 31

    (48) ExpressionB -> Bool .

    Then            reduce using rule 48 (ExpressionB -> Bool .)
    AND             reduce using rule 48 (ExpressionB -> Bool .)
    OR              reduce using rule 48 (ExpressionB -> Bool .)
    LBRACKET        reduce using rule 48 (ExpressionB -> Bool .)
    RPAREN          reduce using rule 48 (ExpressionB -> Bool .)
    COMMA           reduce using rule 48 (ExpressionB -> Bool .)
    WriteString     reduce using rule 48 (ExpressionB -> Bool .)
    Err             reduce using rule 48 (ExpressionB -> Bool .)
    Name            reduce using rule 48 (ExpressionB -> Bool .)
    If              reduce using rule 48 (ExpressionB -> Bool .)
    While           reduce using rule 48 (ExpressionB -> Bool .)
    $end            reduce using rule 48 (ExpressionB -> Bool .)
    RBRACKET        reduce using rule 48 (ExpressionB -> Bool .)


state 32

    (51) ExpressionB -> NOT . LPAREN ExpressionB RPAREN

    LPAREN          shift and go to state 62


state 33

    (52) ExpressionB -> LPAREN . ExpressionB RPAREN
    (45) factorI -> LPAREN . ExpressionI RPAREN
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 63
    ExpressionI                    shift and go to state 64
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 34

    (53) ExpressionB -> ExpressionI . LT ExpressionI
    (54) ExpressionB -> ExpressionI . LE ExpressionI
    (55) ExpressionB -> ExpressionI . GT ExpressionI
    (56) ExpressionB -> ExpressionI . GE ExpressionI
    (57) ExpressionB -> ExpressionI . EQ ExpressionI
    (58) ExpressionB -> ExpressionI . NEQ ExpressionI
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    LT              shift and go to state 65
    LE              shift and go to state 66
    GT              shift and go to state 67
    GE              shift and go to state 68
    EQ              shift and go to state 69
    NEQ             shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 35

    (37) ExpressionI -> TermI .
    (38) TermI -> TermI . TIMES factorI
    (39) TermI -> TermI . DIVIDE factorI
    (40) TermI -> TermI . MOD factorI

    LT              reduce using rule 37 (ExpressionI -> TermI .)
    LE              reduce using rule 37 (ExpressionI -> TermI .)
    GT              reduce using rule 37 (ExpressionI -> TermI .)
    GE              reduce using rule 37 (ExpressionI -> TermI .)
    EQ              reduce using rule 37 (ExpressionI -> TermI .)
    NEQ             reduce using rule 37 (ExpressionI -> TermI .)
    PLUS            reduce using rule 37 (ExpressionI -> TermI .)
    MINUS           reduce using rule 37 (ExpressionI -> TermI .)
    RPAREN          reduce using rule 37 (ExpressionI -> TermI .)
    COMMA           reduce using rule 37 (ExpressionI -> TermI .)
    WriteString     reduce using rule 37 (ExpressionI -> TermI .)
    Err             reduce using rule 37 (ExpressionI -> TermI .)
    Name            reduce using rule 37 (ExpressionI -> TermI .)
    If              reduce using rule 37 (ExpressionI -> TermI .)
    While           reduce using rule 37 (ExpressionI -> TermI .)
    $end            reduce using rule 37 (ExpressionI -> TermI .)
    RBRACKET        reduce using rule 37 (ExpressionI -> TermI .)
    RSQBRACKET      reduce using rule 37 (ExpressionI -> TermI .)
    Then            reduce using rule 37 (ExpressionI -> TermI .)
    AND             reduce using rule 37 (ExpressionI -> TermI .)
    OR              reduce using rule 37 (ExpressionI -> TermI .)
    LBRACKET        reduce using rule 37 (ExpressionI -> TermI .)
    DeclEnd         reduce using rule 37 (ExpressionI -> TermI .)
    IntDecl         reduce using rule 37 (ExpressionI -> TermI .)
    BoolDecl        reduce using rule 37 (ExpressionI -> TermI .)
    StringDecl      reduce using rule 37 (ExpressionI -> TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 36

    (46) factorI -> MINUS . LPAREN ExpressionI RPAREN
    (47) factorI -> MINUS . Integer

    LPAREN          shift and go to state 76
    Integer         shift and go to state 77


state 37

    (41) TermI -> factorI .

    TIMES           reduce using rule 41 (TermI -> factorI .)
    DIVIDE          reduce using rule 41 (TermI -> factorI .)
    MOD             reduce using rule 41 (TermI -> factorI .)
    LT              reduce using rule 41 (TermI -> factorI .)
    LE              reduce using rule 41 (TermI -> factorI .)
    GT              reduce using rule 41 (TermI -> factorI .)
    GE              reduce using rule 41 (TermI -> factorI .)
    EQ              reduce using rule 41 (TermI -> factorI .)
    NEQ             reduce using rule 41 (TermI -> factorI .)
    PLUS            reduce using rule 41 (TermI -> factorI .)
    MINUS           reduce using rule 41 (TermI -> factorI .)
    RPAREN          reduce using rule 41 (TermI -> factorI .)
    COMMA           reduce using rule 41 (TermI -> factorI .)
    WriteString     reduce using rule 41 (TermI -> factorI .)
    Err             reduce using rule 41 (TermI -> factorI .)
    Name            reduce using rule 41 (TermI -> factorI .)
    If              reduce using rule 41 (TermI -> factorI .)
    While           reduce using rule 41 (TermI -> factorI .)
    $end            reduce using rule 41 (TermI -> factorI .)
    RBRACKET        reduce using rule 41 (TermI -> factorI .)
    RSQBRACKET      reduce using rule 41 (TermI -> factorI .)
    Then            reduce using rule 41 (TermI -> factorI .)
    AND             reduce using rule 41 (TermI -> factorI .)
    OR              reduce using rule 41 (TermI -> factorI .)
    LBRACKET        reduce using rule 41 (TermI -> factorI .)
    DeclEnd         reduce using rule 41 (TermI -> factorI .)
    IntDecl         reduce using rule 41 (TermI -> factorI .)
    BoolDecl        reduce using rule 41 (TermI -> factorI .)
    StringDecl      reduce using rule 41 (TermI -> factorI .)


state 38

    (42) factorI -> Integer .

    TIMES           reduce using rule 42 (factorI -> Integer .)
    DIVIDE          reduce using rule 42 (factorI -> Integer .)
    MOD             reduce using rule 42 (factorI -> Integer .)
    LT              reduce using rule 42 (factorI -> Integer .)
    LE              reduce using rule 42 (factorI -> Integer .)
    GT              reduce using rule 42 (factorI -> Integer .)
    GE              reduce using rule 42 (factorI -> Integer .)
    EQ              reduce using rule 42 (factorI -> Integer .)
    NEQ             reduce using rule 42 (factorI -> Integer .)
    PLUS            reduce using rule 42 (factorI -> Integer .)
    MINUS           reduce using rule 42 (factorI -> Integer .)
    RPAREN          reduce using rule 42 (factorI -> Integer .)
    COMMA           reduce using rule 42 (factorI -> Integer .)
    WriteString     reduce using rule 42 (factorI -> Integer .)
    Err             reduce using rule 42 (factorI -> Integer .)
    Name            reduce using rule 42 (factorI -> Integer .)
    If              reduce using rule 42 (factorI -> Integer .)
    While           reduce using rule 42 (factorI -> Integer .)
    $end            reduce using rule 42 (factorI -> Integer .)
    RBRACKET        reduce using rule 42 (factorI -> Integer .)
    RSQBRACKET      reduce using rule 42 (factorI -> Integer .)
    Then            reduce using rule 42 (factorI -> Integer .)
    AND             reduce using rule 42 (factorI -> Integer .)
    OR              reduce using rule 42 (factorI -> Integer .)
    LBRACKET        reduce using rule 42 (factorI -> Integer .)
    DeclEnd         reduce using rule 42 (factorI -> Integer .)
    IntDecl         reduce using rule 42 (factorI -> Integer .)
    BoolDecl        reduce using rule 42 (factorI -> Integer .)
    StringDecl      reduce using rule 42 (factorI -> Integer .)


state 39

    (43) factorI -> Name .
    (44) factorI -> Name . LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET

    TIMES           reduce using rule 43 (factorI -> Name .)
    DIVIDE          reduce using rule 43 (factorI -> Name .)
    MOD             reduce using rule 43 (factorI -> Name .)
    LT              reduce using rule 43 (factorI -> Name .)
    LE              reduce using rule 43 (factorI -> Name .)
    GT              reduce using rule 43 (factorI -> Name .)
    GE              reduce using rule 43 (factorI -> Name .)
    EQ              reduce using rule 43 (factorI -> Name .)
    NEQ             reduce using rule 43 (factorI -> Name .)
    PLUS            reduce using rule 43 (factorI -> Name .)
    MINUS           reduce using rule 43 (factorI -> Name .)
    RPAREN          reduce using rule 43 (factorI -> Name .)
    COMMA           reduce using rule 43 (factorI -> Name .)
    WriteString     reduce using rule 43 (factorI -> Name .)
    Err             reduce using rule 43 (factorI -> Name .)
    Name            reduce using rule 43 (factorI -> Name .)
    If              reduce using rule 43 (factorI -> Name .)
    While           reduce using rule 43 (factorI -> Name .)
    $end            reduce using rule 43 (factorI -> Name .)
    RBRACKET        reduce using rule 43 (factorI -> Name .)
    RSQBRACKET      reduce using rule 43 (factorI -> Name .)
    Then            reduce using rule 43 (factorI -> Name .)
    AND             reduce using rule 43 (factorI -> Name .)
    OR              reduce using rule 43 (factorI -> Name .)
    LBRACKET        reduce using rule 43 (factorI -> Name .)
    DeclEnd         reduce using rule 43 (factorI -> Name .)
    IntDecl         reduce using rule 43 (factorI -> Name .)
    BoolDecl        reduce using rule 43 (factorI -> Name .)
    StringDecl      reduce using rule 43 (factorI -> Name .)
    LSQBRACKET      shift and go to state 78


state 40

    (64) WhileDo -> While ExpressionB . LBRACKET CommandBlock RBRACKET
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    LBRACKET        shift and go to state 79
    AND             shift and go to state 60
    OR              shift and go to state 61


state 41

    (2) DeclBlock -> DeclBegin Vars DeclEnd .

    WriteString     reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Err             reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Name            reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    If              reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    While           reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)


state 42

    (3) Vars -> Vars Var .

    DeclEnd         reduce using rule 3 (Vars -> Vars Var .)
    IntDecl         reduce using rule 3 (Vars -> Vars Var .)
    BoolDecl        reduce using rule 3 (Vars -> Vars Var .)
    StringDecl      reduce using rule 3 (Vars -> Vars Var .)


state 43

    (10) intvar -> IntDecl Name . Decl ExpressionI
    (11) intvar -> IntDecl Name .

    Decl            shift and go to state 80
    DeclEnd         reduce using rule 11 (intvar -> IntDecl Name .)
    IntDecl         reduce using rule 11 (intvar -> IntDecl Name .)
    BoolDecl        reduce using rule 11 (intvar -> IntDecl Name .)
    StringDecl      reduce using rule 11 (intvar -> IntDecl Name .)


state 44

    (16) arrvar -> IntDecl LSQBRACKET . Integer RSQBRACKET Name
    (17) arr2var -> IntDecl LSQBRACKET . Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    Integer         shift and go to state 81


state 45

    (12) boolvar -> BoolDecl Name . Decl Bool
    (13) boolvar -> BoolDecl Name .

    Decl            shift and go to state 82
    DeclEnd         reduce using rule 13 (boolvar -> BoolDecl Name .)
    IntDecl         reduce using rule 13 (boolvar -> BoolDecl Name .)
    BoolDecl        reduce using rule 13 (boolvar -> BoolDecl Name .)
    StringDecl      reduce using rule 13 (boolvar -> BoolDecl Name .)


state 46

    (14) stringvar -> StringDecl Name . Decl String
    (15) stringvar -> StringDecl Name .

    Decl            shift and go to state 83
    DeclEnd         reduce using rule 15 (stringvar -> StringDecl Name .)
    IntDecl         reduce using rule 15 (stringvar -> StringDecl Name .)
    BoolDecl        reduce using rule 15 (stringvar -> StringDecl Name .)
    StringDecl      reduce using rule 15 (stringvar -> StringDecl Name .)


state 47

    (33) Command -> WriteString LPAREN PrintableList . RPAREN
    (31) PrintableList -> PrintableList . COMMA PrintableElem

    RPAREN          shift and go to state 84
    COMMA           shift and go to state 85


state 48

    (32) PrintableList -> PrintableElem .

    RPAREN          reduce using rule 32 (PrintableList -> PrintableElem .)
    COMMA           reduce using rule 32 (PrintableList -> PrintableElem .)


state 49

    (28) PrintableElem -> ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI
    (53) ExpressionB -> ExpressionI . LT ExpressionI
    (54) ExpressionB -> ExpressionI . LE ExpressionI
    (55) ExpressionB -> ExpressionI . GT ExpressionI
    (56) ExpressionB -> ExpressionI . GE ExpressionI
    (57) ExpressionB -> ExpressionI . EQ ExpressionI
    (58) ExpressionB -> ExpressionI . NEQ ExpressionI

    RPAREN          reduce using rule 28 (PrintableElem -> ExpressionI .)
    COMMA           reduce using rule 28 (PrintableElem -> ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    LT              shift and go to state 65
    LE              shift and go to state 66
    GT              shift and go to state 67
    GE              shift and go to state 68
    EQ              shift and go to state 69
    NEQ             shift and go to state 70


state 50

    (29) PrintableElem -> ExpressionB .
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          reduce using rule 29 (PrintableElem -> ExpressionB .)
    COMMA           reduce using rule 29 (PrintableElem -> ExpressionB .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 51

    (30) PrintableElem -> String .

    RPAREN          reduce using rule 30 (PrintableElem -> String .)
    COMMA           reduce using rule 30 (PrintableElem -> String .)


state 52

    (34) Command -> Err LPAREN String . RPAREN

    RPAREN          shift and go to state 86


state 53

    (21) Assign -> Name ASSIGN ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI
    (53) ExpressionB -> ExpressionI . LT ExpressionI
    (54) ExpressionB -> ExpressionI . LE ExpressionI
    (55) ExpressionB -> ExpressionI . GT ExpressionI
    (56) ExpressionB -> ExpressionI . GE ExpressionI
    (57) ExpressionB -> ExpressionI . EQ ExpressionI
    (58) ExpressionB -> ExpressionI . NEQ ExpressionI

    WriteString     reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    Err             reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    Name            reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    If              reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    While           reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    $end            reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 21 (Assign -> Name ASSIGN ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    LT              shift and go to state 65
    LE              shift and go to state 66
    GT              shift and go to state 67
    GE              shift and go to state 68
    EQ              shift and go to state 69
    NEQ             shift and go to state 70


state 54

    (24) Assign -> Name ASSIGN ExpressionB .
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    WriteString     reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    Err             reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    Name            reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    If              reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    While           reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    $end            reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    RBRACKET        reduce using rule 24 (Assign -> Name ASSIGN ExpressionB .)
    AND             shift and go to state 60
    OR              shift and go to state 61


state 55

    (25) Assign -> Name ASSIGN String .

    WriteString     reduce using rule 25 (Assign -> Name ASSIGN String .)
    Err             reduce using rule 25 (Assign -> Name ASSIGN String .)
    Name            reduce using rule 25 (Assign -> Name ASSIGN String .)
    If              reduce using rule 25 (Assign -> Name ASSIGN String .)
    While           reduce using rule 25 (Assign -> Name ASSIGN String .)
    $end            reduce using rule 25 (Assign -> Name ASSIGN String .)
    RBRACKET        reduce using rule 25 (Assign -> Name ASSIGN String .)


state 56

    (26) Assign -> Name ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 87


state 57

    (22) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 88
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 58

    (45) factorI -> LPAREN . ExpressionI RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 89
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 59

    (61) IfThenElse -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 90


state 60

    (49) ExpressionB -> ExpressionB AND . ExpressionB
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 91
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 61

    (50) ExpressionB -> ExpressionB OR . ExpressionB
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 92
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 62

    (51) ExpressionB -> NOT LPAREN . ExpressionB RPAREN
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    ExpressionB                    shift and go to state 93
    ExpressionI                    shift and go to state 34
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 63

    (52) ExpressionB -> LPAREN ExpressionB . RPAREN
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          shift and go to state 94
    AND             shift and go to state 60
    OR              shift and go to state 61


state 64

    (45) factorI -> LPAREN ExpressionI . RPAREN
    (53) ExpressionB -> ExpressionI . LT ExpressionI
    (54) ExpressionB -> ExpressionI . LE ExpressionI
    (55) ExpressionB -> ExpressionI . GT ExpressionI
    (56) ExpressionB -> ExpressionI . GE ExpressionI
    (57) ExpressionB -> ExpressionI . EQ ExpressionI
    (58) ExpressionB -> ExpressionI . NEQ ExpressionI
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 95
    LT              shift and go to state 65
    LE              shift and go to state 66
    GT              shift and go to state 67
    GE              shift and go to state 68
    EQ              shift and go to state 69
    NEQ             shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 65

    (53) ExpressionB -> ExpressionI LT . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 96
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 66

    (54) ExpressionB -> ExpressionI LE . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 97
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 67

    (55) ExpressionB -> ExpressionI GT . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 98
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 68

    (56) ExpressionB -> ExpressionI GE . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 99
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 69

    (57) ExpressionB -> ExpressionI EQ . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 100
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 70

    (58) ExpressionB -> ExpressionI NEQ . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 101
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 71

    (35) ExpressionI -> ExpressionI PLUS . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    TermI                          shift and go to state 102
    factorI                        shift and go to state 37

state 72

    (36) ExpressionI -> ExpressionI MINUS . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    TermI                          shift and go to state 103
    factorI                        shift and go to state 37

state 73

    (38) TermI -> TermI TIMES . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    factorI                        shift and go to state 104

state 74

    (39) TermI -> TermI DIVIDE . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    factorI                        shift and go to state 105

state 75

    (40) TermI -> TermI MOD . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    factorI                        shift and go to state 106

state 76

    (46) factorI -> MINUS LPAREN . ExpressionI RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 107
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 77

    (47) factorI -> MINUS Integer .

    TIMES           reduce using rule 47 (factorI -> MINUS Integer .)
    DIVIDE          reduce using rule 47 (factorI -> MINUS Integer .)
    MOD             reduce using rule 47 (factorI -> MINUS Integer .)
    LT              reduce using rule 47 (factorI -> MINUS Integer .)
    LE              reduce using rule 47 (factorI -> MINUS Integer .)
    GT              reduce using rule 47 (factorI -> MINUS Integer .)
    GE              reduce using rule 47 (factorI -> MINUS Integer .)
    EQ              reduce using rule 47 (factorI -> MINUS Integer .)
    NEQ             reduce using rule 47 (factorI -> MINUS Integer .)
    PLUS            reduce using rule 47 (factorI -> MINUS Integer .)
    MINUS           reduce using rule 47 (factorI -> MINUS Integer .)
    RPAREN          reduce using rule 47 (factorI -> MINUS Integer .)
    COMMA           reduce using rule 47 (factorI -> MINUS Integer .)
    WriteString     reduce using rule 47 (factorI -> MINUS Integer .)
    Err             reduce using rule 47 (factorI -> MINUS Integer .)
    Name            reduce using rule 47 (factorI -> MINUS Integer .)
    If              reduce using rule 47 (factorI -> MINUS Integer .)
    While           reduce using rule 47 (factorI -> MINUS Integer .)
    $end            reduce using rule 47 (factorI -> MINUS Integer .)
    RBRACKET        reduce using rule 47 (factorI -> MINUS Integer .)
    RSQBRACKET      reduce using rule 47 (factorI -> MINUS Integer .)
    Then            reduce using rule 47 (factorI -> MINUS Integer .)
    AND             reduce using rule 47 (factorI -> MINUS Integer .)
    OR              reduce using rule 47 (factorI -> MINUS Integer .)
    LBRACKET        reduce using rule 47 (factorI -> MINUS Integer .)
    DeclEnd         reduce using rule 47 (factorI -> MINUS Integer .)
    IntDecl         reduce using rule 47 (factorI -> MINUS Integer .)
    BoolDecl        reduce using rule 47 (factorI -> MINUS Integer .)
    StringDecl      reduce using rule 47 (factorI -> MINUS Integer .)


state 78

    (44) factorI -> Name LSQBRACKET . ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 108
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 79

    (64) WhileDo -> While ExpressionB LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 109
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 80

    (10) intvar -> IntDecl Name Decl . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 110
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 81

    (16) arrvar -> IntDecl LSQBRACKET Integer . RSQBRACKET Name
    (17) arr2var -> IntDecl LSQBRACKET Integer . RSQBRACKET LSQBRACKET Integer RSQBRACKET Name

    RSQBRACKET      shift and go to state 111


state 82

    (12) boolvar -> BoolDecl Name Decl . Bool

    Bool            shift and go to state 112


state 83

    (14) stringvar -> StringDecl Name Decl . String

    String          shift and go to state 113


state 84

    (33) Command -> WriteString LPAREN PrintableList RPAREN .

    WriteString     reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Err             reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Name            reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    If              reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    While           reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    $end            reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)
    RBRACKET        reduce using rule 33 (Command -> WriteString LPAREN PrintableList RPAREN .)


state 85

    (31) PrintableList -> PrintableList COMMA . PrintableElem
    (28) PrintableElem -> . ExpressionI
    (29) PrintableElem -> . ExpressionB
    (30) PrintableElem -> . String
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (48) ExpressionB -> . Bool
    (49) ExpressionB -> . ExpressionB AND ExpressionB
    (50) ExpressionB -> . ExpressionB OR ExpressionB
    (51) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (52) ExpressionB -> . LPAREN ExpressionB RPAREN
    (53) ExpressionB -> . ExpressionI LT ExpressionI
    (54) ExpressionB -> . ExpressionI LE ExpressionI
    (55) ExpressionB -> . ExpressionI GT ExpressionI
    (56) ExpressionB -> . ExpressionI GE ExpressionI
    (57) ExpressionB -> . ExpressionI EQ ExpressionI
    (58) ExpressionB -> . ExpressionI NEQ ExpressionI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    String          shift and go to state 51
    Bool            shift and go to state 31
    NOT             shift and go to state 32
    LPAREN          shift and go to state 33
    Integer         shift and go to state 38
    Name            shift and go to state 39
    MINUS           shift and go to state 36

    PrintableElem                  shift and go to state 114
    ExpressionI                    shift and go to state 49
    ExpressionB                    shift and go to state 50
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 86

    (34) Command -> Err LPAREN String RPAREN .

    WriteString     reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    Err             reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    Name            reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    If              reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    While           reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    $end            reduce using rule 34 (Command -> Err LPAREN String RPAREN .)
    RBRACKET        reduce using rule 34 (Command -> Err LPAREN String RPAREN .)


state 87

    (26) Assign -> Name ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 115


state 88

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ExpressionI
    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 117
    LSQBRACKET      shift and go to state 116


state 89

    (45) factorI -> LPAREN ExpressionI . RPAREN
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 95
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 90

    (61) IfThenElse -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 118
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 91

    (49) ExpressionB -> ExpressionB AND ExpressionB .
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    Then            reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    AND             reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    OR              reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    LBRACKET        reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    RPAREN          reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    COMMA           reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    WriteString     reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    Err             reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    Name            reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    If              reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    While           reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    $end            reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)
    RBRACKET        reduce using rule 49 (ExpressionB -> ExpressionB AND ExpressionB .)

  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 92

    (50) ExpressionB -> ExpressionB OR ExpressionB .
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    Then            reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    OR              reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    LBRACKET        reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    RPAREN          reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    COMMA           reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    WriteString     reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    Err             reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    Name            reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    If              reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    While           reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    $end            reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    RBRACKET        reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .)
    AND             shift and go to state 60

  ! AND             [ reduce using rule 50 (ExpressionB -> ExpressionB OR ExpressionB .) ]
  ! OR              [ shift and go to state 61 ]


state 93

    (51) ExpressionB -> NOT LPAREN ExpressionB . RPAREN
    (49) ExpressionB -> ExpressionB . AND ExpressionB
    (50) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          shift and go to state 119
    AND             shift and go to state 60
    OR              shift and go to state 61


state 94

    (52) ExpressionB -> LPAREN ExpressionB RPAREN .

    Then            reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    AND             reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    OR              reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    LBRACKET        reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    RPAREN          reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    COMMA           reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    WriteString     reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    Err             reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    Name            reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    If              reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    While           reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    $end            reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    RBRACKET        reduce using rule 52 (ExpressionB -> LPAREN ExpressionB RPAREN .)


state 95

    (45) factorI -> LPAREN ExpressionI RPAREN .

    TIMES           reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    DIVIDE          reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    MOD             reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    LT              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    LE              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    GT              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    GE              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    EQ              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    NEQ             reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    PLUS            reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    MINUS           reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    RPAREN          reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    COMMA           reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    WriteString     reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    Err             reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    Name            reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    If              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    While           reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    $end            reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    RBRACKET        reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    RSQBRACKET      reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    Then            reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    AND             reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    OR              reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    LBRACKET        reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    DeclEnd         reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    IntDecl         reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    BoolDecl        reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)
    StringDecl      reduce using rule 45 (factorI -> LPAREN ExpressionI RPAREN .)


state 96

    (53) ExpressionB -> ExpressionI LT ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    AND             reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    OR              reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    LBRACKET        reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    RPAREN          reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    COMMA           reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    WriteString     reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    Err             reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    Name            reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    If              reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    While           reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    $end            reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    RBRACKET        reduce using rule 53 (ExpressionB -> ExpressionI LT ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 97

    (54) ExpressionB -> ExpressionI LE ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    AND             reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    OR              reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    LBRACKET        reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    RPAREN          reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    COMMA           reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    WriteString     reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    Err             reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    Name            reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    If              reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    While           reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    $end            reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    RBRACKET        reduce using rule 54 (ExpressionB -> ExpressionI LE ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 98

    (55) ExpressionB -> ExpressionI GT ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    AND             reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    OR              reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    LBRACKET        reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    RPAREN          reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    COMMA           reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    WriteString     reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    Err             reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    Name            reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    If              reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    While           reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    $end            reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    RBRACKET        reduce using rule 55 (ExpressionB -> ExpressionI GT ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 99

    (56) ExpressionB -> ExpressionI GE ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    AND             reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    OR              reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    LBRACKET        reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    RPAREN          reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    COMMA           reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    WriteString     reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    Err             reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    Name            reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    If              reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    While           reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    $end            reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    RBRACKET        reduce using rule 56 (ExpressionB -> ExpressionI GE ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 100

    (57) ExpressionB -> ExpressionI EQ ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    AND             reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    OR              reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    LBRACKET        reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    RPAREN          reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    COMMA           reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    WriteString     reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    Err             reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    Name            reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    If              reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    While           reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    $end            reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    RBRACKET        reduce using rule 57 (ExpressionB -> ExpressionI EQ ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 101

    (58) ExpressionB -> ExpressionI NEQ ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    AND             reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    OR              reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    LBRACKET        reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    RPAREN          reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    COMMA           reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    WriteString     reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    Err             reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    Name            reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    If              reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    While           reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    $end            reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    RBRACKET        reduce using rule 58 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 102

    (35) ExpressionI -> ExpressionI PLUS TermI .
    (38) TermI -> TermI . TIMES factorI
    (39) TermI -> TermI . DIVIDE factorI
    (40) TermI -> TermI . MOD factorI

    LT              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    LE              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    GT              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    GE              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    EQ              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    NEQ             reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    PLUS            reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    MINUS           reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    RPAREN          reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    COMMA           reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    WriteString     reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    Err             reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    Name            reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    If              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    While           reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    $end            reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    RBRACKET        reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    RSQBRACKET      reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    Then            reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    AND             reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    OR              reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    LBRACKET        reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    DeclEnd         reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    IntDecl         reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    BoolDecl        reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    StringDecl      reduce using rule 35 (ExpressionI -> ExpressionI PLUS TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 103

    (36) ExpressionI -> ExpressionI MINUS TermI .
    (38) TermI -> TermI . TIMES factorI
    (39) TermI -> TermI . DIVIDE factorI
    (40) TermI -> TermI . MOD factorI

    LT              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    LE              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    GT              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    GE              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    EQ              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    NEQ             reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    PLUS            reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    MINUS           reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    RPAREN          reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    COMMA           reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    WriteString     reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    Err             reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    Name            reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    If              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    While           reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    $end            reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    RBRACKET        reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    RSQBRACKET      reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    Then            reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    AND             reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    OR              reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    LBRACKET        reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    DeclEnd         reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    IntDecl         reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    BoolDecl        reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    StringDecl      reduce using rule 36 (ExpressionI -> ExpressionI MINUS TermI .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75


state 104

    (38) TermI -> TermI TIMES factorI .

    TIMES           reduce using rule 38 (TermI -> TermI TIMES factorI .)
    DIVIDE          reduce using rule 38 (TermI -> TermI TIMES factorI .)
    MOD             reduce using rule 38 (TermI -> TermI TIMES factorI .)
    LT              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    LE              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    GT              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    GE              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    EQ              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    NEQ             reduce using rule 38 (TermI -> TermI TIMES factorI .)
    PLUS            reduce using rule 38 (TermI -> TermI TIMES factorI .)
    MINUS           reduce using rule 38 (TermI -> TermI TIMES factorI .)
    RPAREN          reduce using rule 38 (TermI -> TermI TIMES factorI .)
    COMMA           reduce using rule 38 (TermI -> TermI TIMES factorI .)
    WriteString     reduce using rule 38 (TermI -> TermI TIMES factorI .)
    Err             reduce using rule 38 (TermI -> TermI TIMES factorI .)
    Name            reduce using rule 38 (TermI -> TermI TIMES factorI .)
    If              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    While           reduce using rule 38 (TermI -> TermI TIMES factorI .)
    $end            reduce using rule 38 (TermI -> TermI TIMES factorI .)
    RBRACKET        reduce using rule 38 (TermI -> TermI TIMES factorI .)
    RSQBRACKET      reduce using rule 38 (TermI -> TermI TIMES factorI .)
    Then            reduce using rule 38 (TermI -> TermI TIMES factorI .)
    AND             reduce using rule 38 (TermI -> TermI TIMES factorI .)
    OR              reduce using rule 38 (TermI -> TermI TIMES factorI .)
    LBRACKET        reduce using rule 38 (TermI -> TermI TIMES factorI .)
    DeclEnd         reduce using rule 38 (TermI -> TermI TIMES factorI .)
    IntDecl         reduce using rule 38 (TermI -> TermI TIMES factorI .)
    BoolDecl        reduce using rule 38 (TermI -> TermI TIMES factorI .)
    StringDecl      reduce using rule 38 (TermI -> TermI TIMES factorI .)


state 105

    (39) TermI -> TermI DIVIDE factorI .

    TIMES           reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    DIVIDE          reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    MOD             reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    LT              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    LE              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    GT              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    GE              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    EQ              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    NEQ             reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    PLUS            reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    MINUS           reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    RPAREN          reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    COMMA           reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    WriteString     reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    Err             reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    Name            reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    If              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    While           reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    $end            reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    RBRACKET        reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    RSQBRACKET      reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    Then            reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    AND             reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    OR              reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    LBRACKET        reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    DeclEnd         reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    IntDecl         reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    BoolDecl        reduce using rule 39 (TermI -> TermI DIVIDE factorI .)
    StringDecl      reduce using rule 39 (TermI -> TermI DIVIDE factorI .)


state 106

    (40) TermI -> TermI MOD factorI .

    TIMES           reduce using rule 40 (TermI -> TermI MOD factorI .)
    DIVIDE          reduce using rule 40 (TermI -> TermI MOD factorI .)
    MOD             reduce using rule 40 (TermI -> TermI MOD factorI .)
    LT              reduce using rule 40 (TermI -> TermI MOD factorI .)
    LE              reduce using rule 40 (TermI -> TermI MOD factorI .)
    GT              reduce using rule 40 (TermI -> TermI MOD factorI .)
    GE              reduce using rule 40 (TermI -> TermI MOD factorI .)
    EQ              reduce using rule 40 (TermI -> TermI MOD factorI .)
    NEQ             reduce using rule 40 (TermI -> TermI MOD factorI .)
    PLUS            reduce using rule 40 (TermI -> TermI MOD factorI .)
    MINUS           reduce using rule 40 (TermI -> TermI MOD factorI .)
    RPAREN          reduce using rule 40 (TermI -> TermI MOD factorI .)
    COMMA           reduce using rule 40 (TermI -> TermI MOD factorI .)
    WriteString     reduce using rule 40 (TermI -> TermI MOD factorI .)
    Err             reduce using rule 40 (TermI -> TermI MOD factorI .)
    Name            reduce using rule 40 (TermI -> TermI MOD factorI .)
    If              reduce using rule 40 (TermI -> TermI MOD factorI .)
    While           reduce using rule 40 (TermI -> TermI MOD factorI .)
    $end            reduce using rule 40 (TermI -> TermI MOD factorI .)
    RBRACKET        reduce using rule 40 (TermI -> TermI MOD factorI .)
    RSQBRACKET      reduce using rule 40 (TermI -> TermI MOD factorI .)
    Then            reduce using rule 40 (TermI -> TermI MOD factorI .)
    AND             reduce using rule 40 (TermI -> TermI MOD factorI .)
    OR              reduce using rule 40 (TermI -> TermI MOD factorI .)
    LBRACKET        reduce using rule 40 (TermI -> TermI MOD factorI .)
    DeclEnd         reduce using rule 40 (TermI -> TermI MOD factorI .)
    IntDecl         reduce using rule 40 (TermI -> TermI MOD factorI .)
    BoolDecl        reduce using rule 40 (TermI -> TermI MOD factorI .)
    StringDecl      reduce using rule 40 (TermI -> TermI MOD factorI .)


state 107

    (46) factorI -> MINUS LPAREN ExpressionI . RPAREN
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 108

    (44) factorI -> Name LSQBRACKET ExpressionI . RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 121
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 109

    (64) WhileDo -> While ExpressionB LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 122
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 110

    (10) intvar -> IntDecl Name Decl ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    DeclEnd         reduce using rule 10 (intvar -> IntDecl Name Decl ExpressionI .)
    IntDecl         reduce using rule 10 (intvar -> IntDecl Name Decl ExpressionI .)
    BoolDecl        reduce using rule 10 (intvar -> IntDecl Name Decl ExpressionI .)
    StringDecl      reduce using rule 10 (intvar -> IntDecl Name Decl ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 111

    (16) arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET . Name
    (17) arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET . LSQBRACKET Integer RSQBRACKET Name

    Name            shift and go to state 124
    LSQBRACKET      shift and go to state 123


state 112

    (12) boolvar -> BoolDecl Name Decl Bool .

    DeclEnd         reduce using rule 12 (boolvar -> BoolDecl Name Decl Bool .)
    IntDecl         reduce using rule 12 (boolvar -> BoolDecl Name Decl Bool .)
    BoolDecl        reduce using rule 12 (boolvar -> BoolDecl Name Decl Bool .)
    StringDecl      reduce using rule 12 (boolvar -> BoolDecl Name Decl Bool .)


state 113

    (14) stringvar -> StringDecl Name Decl String .

    DeclEnd         reduce using rule 14 (stringvar -> StringDecl Name Decl String .)
    IntDecl         reduce using rule 14 (stringvar -> StringDecl Name Decl String .)
    BoolDecl        reduce using rule 14 (stringvar -> StringDecl Name Decl String .)
    StringDecl      reduce using rule 14 (stringvar -> StringDecl Name Decl String .)


state 114

    (31) PrintableList -> PrintableList COMMA PrintableElem .

    RPAREN          reduce using rule 31 (PrintableList -> PrintableList COMMA PrintableElem .)
    COMMA           reduce using rule 31 (PrintableList -> PrintableList COMMA PrintableElem .)


state 115

    (26) Assign -> Name ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 26 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)


state 116

    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 125
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 117

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ExpressionI
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 126
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 118

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 127
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 119

    (51) ExpressionB -> NOT LPAREN ExpressionB RPAREN .

    Then            reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    AND             reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    OR              reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    LBRACKET        reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    RPAREN          reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    COMMA           reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    WriteString     reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    Err             reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    Name            reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    If              reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    While           reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    $end            reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    RBRACKET        reduce using rule 51 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)


state 120

    (46) factorI -> MINUS LPAREN ExpressionI RPAREN .

    TIMES           reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    DIVIDE          reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    MOD             reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LT              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LE              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    GT              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    GE              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    EQ              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    NEQ             reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    PLUS            reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    MINUS           reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RPAREN          reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    COMMA           reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    WriteString     reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Err             reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Name            reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    If              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    While           reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    $end            reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RBRACKET        reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RSQBRACKET      reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Then            reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    AND             reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    OR              reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LBRACKET        reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    DeclEnd         reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    IntDecl         reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    BoolDecl        reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    StringDecl      reduce using rule 46 (factorI -> MINUS LPAREN ExpressionI RPAREN .)


state 121

    (44) factorI -> Name LSQBRACKET ExpressionI RSQBRACKET . LSQBRACKET ExpressionI RSQBRACKET

    LSQBRACKET      shift and go to state 128


state 122

    (64) WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 64 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)


state 123

    (17) arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET . Integer RSQBRACKET Name

    Integer         shift and go to state 129


state 124

    (16) arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .

    DeclEnd         reduce using rule 16 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    IntDecl         reduce using rule 16 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    BoolDecl        reduce using rule 16 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    StringDecl      reduce using rule 16 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)


state 125

    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 130
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 126

    (22) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    WriteString     reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Err             reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Name            reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    If              reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    While           reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    $end            reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 22 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 127

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET . Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .

    Else            shift and go to state 131
    WriteString     reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 62 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)


state 128

    (44) factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET . ExpressionI RSQBRACKET
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 132
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 129

    (17) arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer . RSQBRACKET Name

    RSQBRACKET      shift and go to state 133


state 130

    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 134


state 131

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 135


state 132

    (44) factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI . RSQBRACKET
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 136
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 133

    (17) arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET . Name

    Name            shift and go to state 137


state 134

    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ExpressionI
    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ReadString LPAREN RPAREN
    (35) ExpressionI -> . ExpressionI PLUS TermI
    (36) ExpressionI -> . ExpressionI MINUS TermI
    (37) ExpressionI -> . TermI
    (38) TermI -> . TermI TIMES factorI
    (39) TermI -> . TermI DIVIDE factorI
    (40) TermI -> . TermI MOD factorI
    (41) TermI -> . factorI
    (42) factorI -> . Integer
    (43) factorI -> . Name
    (44) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET
    (45) factorI -> . LPAREN ExpressionI RPAREN
    (46) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (47) factorI -> . MINUS Integer

    ReadString      shift and go to state 139
    Integer         shift and go to state 38
    Name            shift and go to state 39
    LPAREN          shift and go to state 58
    MINUS           shift and go to state 36

    ExpressionI                    shift and go to state 138
    TermI                          shift and go to state 35
    factorI                        shift and go to state 37

state 135

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET . CommandBlock RBRACKET
    (18) CommandBlock -> . CommandBlock Command
    (19) CommandBlock -> . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 140
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 136

    (44) factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .

    TIMES           reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    DIVIDE          reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    MOD             reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LT              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LE              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    GT              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    GE              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    EQ              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    NEQ             reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    PLUS            reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    MINUS           reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RPAREN          reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    COMMA           reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    WriteString     reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Err             reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Name            reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    If              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    While           reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    $end            reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RBRACKET        reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    RSQBRACKET      reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    Then            reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    AND             reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    OR              reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    LBRACKET        reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    DeclEnd         reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    IntDecl         reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    BoolDecl        reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)
    StringDecl      reduce using rule 44 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET .)


state 137

    (17) arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .

    DeclEnd         reduce using rule 17 (arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    IntDecl         reduce using rule 17 (arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    BoolDecl        reduce using rule 17 (arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)
    StringDecl      reduce using rule 17 (arr2var -> IntDecl LSQBRACKET Integer RSQBRACKET LSQBRACKET Integer RSQBRACKET Name .)


state 138

    (23) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .
    (35) ExpressionI -> ExpressionI . PLUS TermI
    (36) ExpressionI -> ExpressionI . MINUS TermI

    WriteString     reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Err             reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Name            reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    If              reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    While           reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    $end            reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 23 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 139

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 141


state 140

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock . RBRACKET
    (18) CommandBlock -> CommandBlock . Command
    (20) Command -> . Assign
    (33) Command -> . WriteString LPAREN PrintableList RPAREN
    (34) Command -> . Err LPAREN String RPAREN
    (59) Command -> . IfThenElse
    (60) Command -> . IfThen
    (63) Command -> . WhileDo
    (21) Assign -> . Name ASSIGN ExpressionI
    (22) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (23) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> . Name ASSIGN ExpressionB
    (25) Assign -> . Name ASSIGN String
    (26) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (27) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (61) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (62) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (64) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 142
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 25
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 141

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 143


state 142

    (61) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 61 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)


state 143

    (27) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 27 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)

