Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> DeclBlock CommandBlock
Rule 2     DeclBlock -> DeclBegin Vars DeclEnd
Rule 3     Vars -> Vars Var
Rule 4     Vars -> Var
Rule 5     Var -> intvar
Rule 6     Var -> boolvar
Rule 7     Var -> stringvar
Rule 8     Var -> arrvar
Rule 9     intvar -> IntDecl Name Decl ExpressionI
Rule 10    intvar -> IntDecl Name
Rule 11    boolvar -> BoolDecl Name Decl Bool
Rule 12    boolvar -> BoolDecl Name
Rule 13    stringvar -> StringDecl Name Decl String
Rule 14    stringvar -> StringDecl Name
Rule 15    arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name
Rule 16    CommandBlock -> CommandBlock Command
Rule 17    CommandBlock -> Command
Rule 18    Command -> Assign
Rule 19    Assign -> Name ASSIGN ExpressionI
Rule 20    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
Rule 21    Assign -> Name ASSIGN ExpressionB
Rule 22    Assign -> Name ASSIGN String
Rule 23    Assign -> Name ASSIGN ReadString LPAREN RPAREN
Rule 24    Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
Rule 25    PrintableElem -> ExpressionI
Rule 26    PrintableElem -> ExpressionB
Rule 27    PrintableElem -> String
Rule 28    PrintableList -> PrintableList COMMA PrintableElem
Rule 29    PrintableList -> PrintableElem
Rule 30    Command -> WriteString LPAREN PrintableList RPAREN
Rule 31    Command -> Err LPAREN String RPAREN
Rule 32    ExpressionI -> ExpressionI PLUS TermI
Rule 33    ExpressionI -> ExpressionI MINUS TermI
Rule 34    ExpressionI -> TermI
Rule 35    TermI -> TermI TIMES factorI
Rule 36    TermI -> TermI DIVIDE factorI
Rule 37    TermI -> TermI MOD factorI
Rule 38    TermI -> factorI
Rule 39    factorI -> Integer
Rule 40    factorI -> Name
Rule 41    factorI -> Name LSQBRACKET ExpressionI RSQBRACKET
Rule 42    factorI -> LPAREN ExpressionI RPAREN
Rule 43    factorI -> MINUS LPAREN ExpressionI RPAREN
Rule 44    factorI -> MINUS Integer
Rule 45    ExpressionB -> Bool
Rule 46    ExpressionB -> ExpressionB AND ExpressionB
Rule 47    ExpressionB -> ExpressionB OR ExpressionB
Rule 48    ExpressionB -> NOT LPAREN ExpressionB RPAREN
Rule 49    ExpressionB -> LPAREN ExpressionB RPAREN
Rule 50    ExpressionB -> ExpressionI LT ExpressionI
Rule 51    ExpressionB -> ExpressionI LE ExpressionI
Rule 52    ExpressionB -> ExpressionI GT ExpressionI
Rule 53    ExpressionB -> ExpressionI GE ExpressionI
Rule 54    ExpressionB -> ExpressionI EQ ExpressionI
Rule 55    ExpressionB -> ExpressionI NEQ ExpressionI
Rule 56    Command -> IfThenElse
Rule 57    Command -> IfThen
Rule 58    IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
Rule 59    IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET
Rule 60    Command -> WhileDo
Rule 61    WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET

Terminals, with rules where they appear

AND                  : 46
ASSIGN               : 19 20 21 22 23 24
Bool                 : 11 45
BoolDecl             : 11 12
COMMA                : 28
DIVIDE               : 36
Decl                 : 9 11 13
DeclBegin            : 2
DeclEnd              : 2
EQ                   : 54
Else                 : 58
Err                  : 31
GE                   : 53
GT                   : 52
If                   : 58 59
IntDecl              : 9 10 15
Integer              : 15 39 44
LBRACKET             : 58 58 59 61
LE                   : 51
LPAREN               : 23 24 30 31 42 43 48 49
LSQBRACKET           : 15 20 24 41
LT                   : 50
MINUS                : 33 43 44
MOD                  : 37
NEQ                  : 55
NOT                  : 48
Name                 : 9 10 11 12 13 14 15 19 20 21 22 23 24 40 41
OR                   : 47
PLUS                 : 32
RBRACKET             : 58 58 59 61
RPAREN               : 23 24 30 31 42 43 48 49
RSQBRACKET           : 15 20 24 41
ReadString           : 23 24
String               : 13 22 27 31
StringDecl           : 13 14
TIMES                : 35
Then                 : 58 59
While                : 61
WriteString          : 30
error                : 

Nonterminals, with rules where they appear

Assign               : 18
Command              : 16 17
CommandBlock         : 1 16 58 58 59 61
DeclBlock            : 1
ExpressionB          : 21 26 46 46 47 47 48 49 58 59 61
ExpressionI          : 9 19 20 20 24 25 32 33 41 42 43 50 50 51 51 52 52 53 53 54 54 55 55
IfThen               : 57
IfThenElse           : 56
PrintableElem        : 28 29
PrintableList        : 28 30
Program              : 0
TermI                : 32 33 34 35 36 37
Var                  : 3 4
Vars                 : 2 3
WhileDo              : 60
arrvar               : 8
boolvar              : 6
factorI              : 35 36 37 38
intvar               : 5
stringvar            : 7

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . DeclBlock CommandBlock
    (2) DeclBlock -> . DeclBegin Vars DeclEnd

    DeclBegin       shift and go to state 3

    Program                        shift and go to state 1
    DeclBlock                      shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> DeclBlock . CommandBlock
    (16) CommandBlock -> . CommandBlock Command
    (17) CommandBlock -> . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 4
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 3

    (2) DeclBlock -> DeclBegin . Vars DeclEnd
    (3) Vars -> . Vars Var
    (4) Vars -> . Var
    (5) Var -> . intvar
    (6) Var -> . boolvar
    (7) Var -> . stringvar
    (8) Var -> . arrvar
    (9) intvar -> . IntDecl Name Decl ExpressionI
    (10) intvar -> . IntDecl Name
    (11) boolvar -> . BoolDecl Name Decl Bool
    (12) boolvar -> . BoolDecl Name
    (13) stringvar -> . StringDecl Name Decl String
    (14) stringvar -> . StringDecl Name
    (15) arrvar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name

    IntDecl         shift and go to state 21
    BoolDecl        shift and go to state 22
    StringDecl      shift and go to state 23

    Vars                           shift and go to state 15
    Var                            shift and go to state 16
    intvar                         shift and go to state 17
    boolvar                        shift and go to state 18
    stringvar                      shift and go to state 19
    arrvar                         shift and go to state 20

state 4

    (1) Program -> DeclBlock CommandBlock .
    (16) CommandBlock -> CommandBlock . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    $end            reduce using rule 1 (Program -> DeclBlock CommandBlock .)
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 24
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 5

    (17) CommandBlock -> Command .

    WriteString     reduce using rule 17 (CommandBlock -> Command .)
    Err             reduce using rule 17 (CommandBlock -> Command .)
    Name            reduce using rule 17 (CommandBlock -> Command .)
    If              reduce using rule 17 (CommandBlock -> Command .)
    While           reduce using rule 17 (CommandBlock -> Command .)
    $end            reduce using rule 17 (CommandBlock -> Command .)
    RBRACKET        reduce using rule 17 (CommandBlock -> Command .)


state 6

    (18) Command -> Assign .

    WriteString     reduce using rule 18 (Command -> Assign .)
    Err             reduce using rule 18 (Command -> Assign .)
    Name            reduce using rule 18 (Command -> Assign .)
    If              reduce using rule 18 (Command -> Assign .)
    While           reduce using rule 18 (Command -> Assign .)
    $end            reduce using rule 18 (Command -> Assign .)
    RBRACKET        reduce using rule 18 (Command -> Assign .)


state 7

    (30) Command -> WriteString . LPAREN PrintableList RPAREN

    LPAREN          shift and go to state 25


state 8

    (31) Command -> Err . LPAREN String RPAREN

    LPAREN          shift and go to state 26


state 9

    (56) Command -> IfThenElse .

    WriteString     reduce using rule 56 (Command -> IfThenElse .)
    Err             reduce using rule 56 (Command -> IfThenElse .)
    Name            reduce using rule 56 (Command -> IfThenElse .)
    If              reduce using rule 56 (Command -> IfThenElse .)
    While           reduce using rule 56 (Command -> IfThenElse .)
    $end            reduce using rule 56 (Command -> IfThenElse .)
    RBRACKET        reduce using rule 56 (Command -> IfThenElse .)


state 10

    (57) Command -> IfThen .

    WriteString     reduce using rule 57 (Command -> IfThen .)
    Err             reduce using rule 57 (Command -> IfThen .)
    Name            reduce using rule 57 (Command -> IfThen .)
    If              reduce using rule 57 (Command -> IfThen .)
    While           reduce using rule 57 (Command -> IfThen .)
    $end            reduce using rule 57 (Command -> IfThen .)
    RBRACKET        reduce using rule 57 (Command -> IfThen .)


state 11

    (60) Command -> WhileDo .

    WriteString     reduce using rule 60 (Command -> WhileDo .)
    Err             reduce using rule 60 (Command -> WhileDo .)
    Name            reduce using rule 60 (Command -> WhileDo .)
    If              reduce using rule 60 (Command -> WhileDo .)
    While           reduce using rule 60 (Command -> WhileDo .)
    $end            reduce using rule 60 (Command -> WhileDo .)
    RBRACKET        reduce using rule 60 (Command -> WhileDo .)


state 12

    (19) Assign -> Name . ASSIGN ExpressionI
    (20) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> Name . ASSIGN ExpressionB
    (22) Assign -> Name . ASSIGN String
    (23) Assign -> Name . ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> Name . LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 27
    LSQBRACKET      shift and go to state 28


state 13

    (58) IfThenElse -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If . ExpressionB Then LBRACKET CommandBlock RBRACKET
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 29
    ExpressionI                    shift and go to state 33
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 14

    (61) WhileDo -> While . ExpressionB LBRACKET CommandBlock RBRACKET
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 39
    ExpressionI                    shift and go to state 33
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 15

    (2) DeclBlock -> DeclBegin Vars . DeclEnd
    (3) Vars -> Vars . Var
    (5) Var -> . intvar
    (6) Var -> . boolvar
    (7) Var -> . stringvar
    (8) Var -> . arrvar
    (9) intvar -> . IntDecl Name Decl ExpressionI
    (10) intvar -> . IntDecl Name
    (11) boolvar -> . BoolDecl Name Decl Bool
    (12) boolvar -> . BoolDecl Name
    (13) stringvar -> . StringDecl Name Decl String
    (14) stringvar -> . StringDecl Name
    (15) arrvar -> . IntDecl LSQBRACKET Integer RSQBRACKET Name

    DeclEnd         shift and go to state 40
    IntDecl         shift and go to state 21
    BoolDecl        shift and go to state 22
    StringDecl      shift and go to state 23

    Var                            shift and go to state 41
    intvar                         shift and go to state 17
    boolvar                        shift and go to state 18
    stringvar                      shift and go to state 19
    arrvar                         shift and go to state 20

state 16

    (4) Vars -> Var .

    DeclEnd         reduce using rule 4 (Vars -> Var .)
    IntDecl         reduce using rule 4 (Vars -> Var .)
    BoolDecl        reduce using rule 4 (Vars -> Var .)
    StringDecl      reduce using rule 4 (Vars -> Var .)


state 17

    (5) Var -> intvar .

    DeclEnd         reduce using rule 5 (Var -> intvar .)
    IntDecl         reduce using rule 5 (Var -> intvar .)
    BoolDecl        reduce using rule 5 (Var -> intvar .)
    StringDecl      reduce using rule 5 (Var -> intvar .)


state 18

    (6) Var -> boolvar .

    DeclEnd         reduce using rule 6 (Var -> boolvar .)
    IntDecl         reduce using rule 6 (Var -> boolvar .)
    BoolDecl        reduce using rule 6 (Var -> boolvar .)
    StringDecl      reduce using rule 6 (Var -> boolvar .)


state 19

    (7) Var -> stringvar .

    DeclEnd         reduce using rule 7 (Var -> stringvar .)
    IntDecl         reduce using rule 7 (Var -> stringvar .)
    BoolDecl        reduce using rule 7 (Var -> stringvar .)
    StringDecl      reduce using rule 7 (Var -> stringvar .)


state 20

    (8) Var -> arrvar .

    DeclEnd         reduce using rule 8 (Var -> arrvar .)
    IntDecl         reduce using rule 8 (Var -> arrvar .)
    BoolDecl        reduce using rule 8 (Var -> arrvar .)
    StringDecl      reduce using rule 8 (Var -> arrvar .)


state 21

    (9) intvar -> IntDecl . Name Decl ExpressionI
    (10) intvar -> IntDecl . Name
    (15) arrvar -> IntDecl . LSQBRACKET Integer RSQBRACKET Name

    Name            shift and go to state 42
    LSQBRACKET      shift and go to state 43


state 22

    (11) boolvar -> BoolDecl . Name Decl Bool
    (12) boolvar -> BoolDecl . Name

    Name            shift and go to state 44


state 23

    (13) stringvar -> StringDecl . Name Decl String
    (14) stringvar -> StringDecl . Name

    Name            shift and go to state 45


state 24

    (16) CommandBlock -> CommandBlock Command .

    WriteString     reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    Err             reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    Name            reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    If              reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    While           reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    $end            reduce using rule 16 (CommandBlock -> CommandBlock Command .)
    RBRACKET        reduce using rule 16 (CommandBlock -> CommandBlock Command .)


state 25

    (30) Command -> WriteString LPAREN . PrintableList RPAREN
    (28) PrintableList -> . PrintableList COMMA PrintableElem
    (29) PrintableList -> . PrintableElem
    (25) PrintableElem -> . ExpressionI
    (26) PrintableElem -> . ExpressionB
    (27) PrintableElem -> . String
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    String          shift and go to state 50
    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    PrintableList                  shift and go to state 46
    PrintableElem                  shift and go to state 47
    ExpressionI                    shift and go to state 48
    ExpressionB                    shift and go to state 49
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 26

    (31) Command -> Err LPAREN . String RPAREN

    String          shift and go to state 51


state 27

    (19) Assign -> Name ASSIGN . ExpressionI
    (21) Assign -> Name ASSIGN . ExpressionB
    (22) Assign -> Name ASSIGN . String
    (23) Assign -> Name ASSIGN . ReadString LPAREN RPAREN
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    String          shift and go to state 54
    ReadString      shift and go to state 55
    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 52
    ExpressionB                    shift and go to state 53
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 28

    (20) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> Name LSQBRACKET . ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 56
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 29

    (58) IfThenElse -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If ExpressionB . Then LBRACKET CommandBlock RBRACKET
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    Then            shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 30

    (45) ExpressionB -> Bool .

    Then            reduce using rule 45 (ExpressionB -> Bool .)
    AND             reduce using rule 45 (ExpressionB -> Bool .)
    OR              reduce using rule 45 (ExpressionB -> Bool .)
    LBRACKET        reduce using rule 45 (ExpressionB -> Bool .)
    RPAREN          reduce using rule 45 (ExpressionB -> Bool .)
    COMMA           reduce using rule 45 (ExpressionB -> Bool .)
    WriteString     reduce using rule 45 (ExpressionB -> Bool .)
    Err             reduce using rule 45 (ExpressionB -> Bool .)
    Name            reduce using rule 45 (ExpressionB -> Bool .)
    If              reduce using rule 45 (ExpressionB -> Bool .)
    While           reduce using rule 45 (ExpressionB -> Bool .)
    $end            reduce using rule 45 (ExpressionB -> Bool .)
    RBRACKET        reduce using rule 45 (ExpressionB -> Bool .)


state 31

    (48) ExpressionB -> NOT . LPAREN ExpressionB RPAREN

    LPAREN          shift and go to state 61


state 32

    (49) ExpressionB -> LPAREN . ExpressionB RPAREN
    (42) factorI -> LPAREN . ExpressionI RPAREN
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 62
    ExpressionI                    shift and go to state 63
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 33

    (50) ExpressionB -> ExpressionI . LT ExpressionI
    (51) ExpressionB -> ExpressionI . LE ExpressionI
    (52) ExpressionB -> ExpressionI . GT ExpressionI
    (53) ExpressionB -> ExpressionI . GE ExpressionI
    (54) ExpressionB -> ExpressionI . EQ ExpressionI
    (55) ExpressionB -> ExpressionI . NEQ ExpressionI
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67
    EQ              shift and go to state 68
    NEQ             shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 34

    (34) ExpressionI -> TermI .
    (35) TermI -> TermI . TIMES factorI
    (36) TermI -> TermI . DIVIDE factorI
    (37) TermI -> TermI . MOD factorI

    LT              reduce using rule 34 (ExpressionI -> TermI .)
    LE              reduce using rule 34 (ExpressionI -> TermI .)
    GT              reduce using rule 34 (ExpressionI -> TermI .)
    GE              reduce using rule 34 (ExpressionI -> TermI .)
    EQ              reduce using rule 34 (ExpressionI -> TermI .)
    NEQ             reduce using rule 34 (ExpressionI -> TermI .)
    PLUS            reduce using rule 34 (ExpressionI -> TermI .)
    MINUS           reduce using rule 34 (ExpressionI -> TermI .)
    RPAREN          reduce using rule 34 (ExpressionI -> TermI .)
    COMMA           reduce using rule 34 (ExpressionI -> TermI .)
    WriteString     reduce using rule 34 (ExpressionI -> TermI .)
    Err             reduce using rule 34 (ExpressionI -> TermI .)
    Name            reduce using rule 34 (ExpressionI -> TermI .)
    If              reduce using rule 34 (ExpressionI -> TermI .)
    While           reduce using rule 34 (ExpressionI -> TermI .)
    $end            reduce using rule 34 (ExpressionI -> TermI .)
    RBRACKET        reduce using rule 34 (ExpressionI -> TermI .)
    RSQBRACKET      reduce using rule 34 (ExpressionI -> TermI .)
    Then            reduce using rule 34 (ExpressionI -> TermI .)
    AND             reduce using rule 34 (ExpressionI -> TermI .)
    OR              reduce using rule 34 (ExpressionI -> TermI .)
    LBRACKET        reduce using rule 34 (ExpressionI -> TermI .)
    DeclEnd         reduce using rule 34 (ExpressionI -> TermI .)
    IntDecl         reduce using rule 34 (ExpressionI -> TermI .)
    BoolDecl        reduce using rule 34 (ExpressionI -> TermI .)
    StringDecl      reduce using rule 34 (ExpressionI -> TermI .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 35

    (43) factorI -> MINUS . LPAREN ExpressionI RPAREN
    (44) factorI -> MINUS . Integer

    LPAREN          shift and go to state 75
    Integer         shift and go to state 76


state 36

    (38) TermI -> factorI .

    TIMES           reduce using rule 38 (TermI -> factorI .)
    DIVIDE          reduce using rule 38 (TermI -> factorI .)
    MOD             reduce using rule 38 (TermI -> factorI .)
    LT              reduce using rule 38 (TermI -> factorI .)
    LE              reduce using rule 38 (TermI -> factorI .)
    GT              reduce using rule 38 (TermI -> factorI .)
    GE              reduce using rule 38 (TermI -> factorI .)
    EQ              reduce using rule 38 (TermI -> factorI .)
    NEQ             reduce using rule 38 (TermI -> factorI .)
    PLUS            reduce using rule 38 (TermI -> factorI .)
    MINUS           reduce using rule 38 (TermI -> factorI .)
    RPAREN          reduce using rule 38 (TermI -> factorI .)
    COMMA           reduce using rule 38 (TermI -> factorI .)
    WriteString     reduce using rule 38 (TermI -> factorI .)
    Err             reduce using rule 38 (TermI -> factorI .)
    Name            reduce using rule 38 (TermI -> factorI .)
    If              reduce using rule 38 (TermI -> factorI .)
    While           reduce using rule 38 (TermI -> factorI .)
    $end            reduce using rule 38 (TermI -> factorI .)
    RBRACKET        reduce using rule 38 (TermI -> factorI .)
    RSQBRACKET      reduce using rule 38 (TermI -> factorI .)
    Then            reduce using rule 38 (TermI -> factorI .)
    AND             reduce using rule 38 (TermI -> factorI .)
    OR              reduce using rule 38 (TermI -> factorI .)
    LBRACKET        reduce using rule 38 (TermI -> factorI .)
    DeclEnd         reduce using rule 38 (TermI -> factorI .)
    IntDecl         reduce using rule 38 (TermI -> factorI .)
    BoolDecl        reduce using rule 38 (TermI -> factorI .)
    StringDecl      reduce using rule 38 (TermI -> factorI .)


state 37

    (39) factorI -> Integer .

    TIMES           reduce using rule 39 (factorI -> Integer .)
    DIVIDE          reduce using rule 39 (factorI -> Integer .)
    MOD             reduce using rule 39 (factorI -> Integer .)
    LT              reduce using rule 39 (factorI -> Integer .)
    LE              reduce using rule 39 (factorI -> Integer .)
    GT              reduce using rule 39 (factorI -> Integer .)
    GE              reduce using rule 39 (factorI -> Integer .)
    EQ              reduce using rule 39 (factorI -> Integer .)
    NEQ             reduce using rule 39 (factorI -> Integer .)
    PLUS            reduce using rule 39 (factorI -> Integer .)
    MINUS           reduce using rule 39 (factorI -> Integer .)
    RPAREN          reduce using rule 39 (factorI -> Integer .)
    COMMA           reduce using rule 39 (factorI -> Integer .)
    WriteString     reduce using rule 39 (factorI -> Integer .)
    Err             reduce using rule 39 (factorI -> Integer .)
    Name            reduce using rule 39 (factorI -> Integer .)
    If              reduce using rule 39 (factorI -> Integer .)
    While           reduce using rule 39 (factorI -> Integer .)
    $end            reduce using rule 39 (factorI -> Integer .)
    RBRACKET        reduce using rule 39 (factorI -> Integer .)
    RSQBRACKET      reduce using rule 39 (factorI -> Integer .)
    Then            reduce using rule 39 (factorI -> Integer .)
    AND             reduce using rule 39 (factorI -> Integer .)
    OR              reduce using rule 39 (factorI -> Integer .)
    LBRACKET        reduce using rule 39 (factorI -> Integer .)
    DeclEnd         reduce using rule 39 (factorI -> Integer .)
    IntDecl         reduce using rule 39 (factorI -> Integer .)
    BoolDecl        reduce using rule 39 (factorI -> Integer .)
    StringDecl      reduce using rule 39 (factorI -> Integer .)


state 38

    (40) factorI -> Name .
    (41) factorI -> Name . LSQBRACKET ExpressionI RSQBRACKET

    TIMES           reduce using rule 40 (factorI -> Name .)
    DIVIDE          reduce using rule 40 (factorI -> Name .)
    MOD             reduce using rule 40 (factorI -> Name .)
    LT              reduce using rule 40 (factorI -> Name .)
    LE              reduce using rule 40 (factorI -> Name .)
    GT              reduce using rule 40 (factorI -> Name .)
    GE              reduce using rule 40 (factorI -> Name .)
    EQ              reduce using rule 40 (factorI -> Name .)
    NEQ             reduce using rule 40 (factorI -> Name .)
    PLUS            reduce using rule 40 (factorI -> Name .)
    MINUS           reduce using rule 40 (factorI -> Name .)
    RPAREN          reduce using rule 40 (factorI -> Name .)
    COMMA           reduce using rule 40 (factorI -> Name .)
    WriteString     reduce using rule 40 (factorI -> Name .)
    Err             reduce using rule 40 (factorI -> Name .)
    Name            reduce using rule 40 (factorI -> Name .)
    If              reduce using rule 40 (factorI -> Name .)
    While           reduce using rule 40 (factorI -> Name .)
    $end            reduce using rule 40 (factorI -> Name .)
    RBRACKET        reduce using rule 40 (factorI -> Name .)
    RSQBRACKET      reduce using rule 40 (factorI -> Name .)
    Then            reduce using rule 40 (factorI -> Name .)
    AND             reduce using rule 40 (factorI -> Name .)
    OR              reduce using rule 40 (factorI -> Name .)
    LBRACKET        reduce using rule 40 (factorI -> Name .)
    DeclEnd         reduce using rule 40 (factorI -> Name .)
    IntDecl         reduce using rule 40 (factorI -> Name .)
    BoolDecl        reduce using rule 40 (factorI -> Name .)
    StringDecl      reduce using rule 40 (factorI -> Name .)
    LSQBRACKET      shift and go to state 77


state 39

    (61) WhileDo -> While ExpressionB . LBRACKET CommandBlock RBRACKET
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    LBRACKET        shift and go to state 78
    AND             shift and go to state 59
    OR              shift and go to state 60


state 40

    (2) DeclBlock -> DeclBegin Vars DeclEnd .

    WriteString     reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Err             reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    Name            reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    If              reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)
    While           reduce using rule 2 (DeclBlock -> DeclBegin Vars DeclEnd .)


state 41

    (3) Vars -> Vars Var .

    DeclEnd         reduce using rule 3 (Vars -> Vars Var .)
    IntDecl         reduce using rule 3 (Vars -> Vars Var .)
    BoolDecl        reduce using rule 3 (Vars -> Vars Var .)
    StringDecl      reduce using rule 3 (Vars -> Vars Var .)


state 42

    (9) intvar -> IntDecl Name . Decl ExpressionI
    (10) intvar -> IntDecl Name .

    Decl            shift and go to state 79
    DeclEnd         reduce using rule 10 (intvar -> IntDecl Name .)
    IntDecl         reduce using rule 10 (intvar -> IntDecl Name .)
    BoolDecl        reduce using rule 10 (intvar -> IntDecl Name .)
    StringDecl      reduce using rule 10 (intvar -> IntDecl Name .)


state 43

    (15) arrvar -> IntDecl LSQBRACKET . Integer RSQBRACKET Name

    Integer         shift and go to state 80


state 44

    (11) boolvar -> BoolDecl Name . Decl Bool
    (12) boolvar -> BoolDecl Name .

    Decl            shift and go to state 81
    DeclEnd         reduce using rule 12 (boolvar -> BoolDecl Name .)
    IntDecl         reduce using rule 12 (boolvar -> BoolDecl Name .)
    BoolDecl        reduce using rule 12 (boolvar -> BoolDecl Name .)
    StringDecl      reduce using rule 12 (boolvar -> BoolDecl Name .)


state 45

    (13) stringvar -> StringDecl Name . Decl String
    (14) stringvar -> StringDecl Name .

    Decl            shift and go to state 82
    DeclEnd         reduce using rule 14 (stringvar -> StringDecl Name .)
    IntDecl         reduce using rule 14 (stringvar -> StringDecl Name .)
    BoolDecl        reduce using rule 14 (stringvar -> StringDecl Name .)
    StringDecl      reduce using rule 14 (stringvar -> StringDecl Name .)


state 46

    (30) Command -> WriteString LPAREN PrintableList . RPAREN
    (28) PrintableList -> PrintableList . COMMA PrintableElem

    RPAREN          shift and go to state 83
    COMMA           shift and go to state 84


state 47

    (29) PrintableList -> PrintableElem .

    RPAREN          reduce using rule 29 (PrintableList -> PrintableElem .)
    COMMA           reduce using rule 29 (PrintableList -> PrintableElem .)


state 48

    (25) PrintableElem -> ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI
    (50) ExpressionB -> ExpressionI . LT ExpressionI
    (51) ExpressionB -> ExpressionI . LE ExpressionI
    (52) ExpressionB -> ExpressionI . GT ExpressionI
    (53) ExpressionB -> ExpressionI . GE ExpressionI
    (54) ExpressionB -> ExpressionI . EQ ExpressionI
    (55) ExpressionB -> ExpressionI . NEQ ExpressionI

    RPAREN          reduce using rule 25 (PrintableElem -> ExpressionI .)
    COMMA           reduce using rule 25 (PrintableElem -> ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67
    EQ              shift and go to state 68
    NEQ             shift and go to state 69


state 49

    (26) PrintableElem -> ExpressionB .
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          reduce using rule 26 (PrintableElem -> ExpressionB .)
    COMMA           reduce using rule 26 (PrintableElem -> ExpressionB .)
    AND             shift and go to state 59
    OR              shift and go to state 60


state 50

    (27) PrintableElem -> String .

    RPAREN          reduce using rule 27 (PrintableElem -> String .)
    COMMA           reduce using rule 27 (PrintableElem -> String .)


state 51

    (31) Command -> Err LPAREN String . RPAREN

    RPAREN          shift and go to state 85


state 52

    (19) Assign -> Name ASSIGN ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI
    (50) ExpressionB -> ExpressionI . LT ExpressionI
    (51) ExpressionB -> ExpressionI . LE ExpressionI
    (52) ExpressionB -> ExpressionI . GT ExpressionI
    (53) ExpressionB -> ExpressionI . GE ExpressionI
    (54) ExpressionB -> ExpressionI . EQ ExpressionI
    (55) ExpressionB -> ExpressionI . NEQ ExpressionI

    WriteString     reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    Err             reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    Name            reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    If              reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    While           reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    $end            reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 19 (Assign -> Name ASSIGN ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67
    EQ              shift and go to state 68
    NEQ             shift and go to state 69


state 53

    (21) Assign -> Name ASSIGN ExpressionB .
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    WriteString     reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    Err             reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    Name            reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    If              reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    While           reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    $end            reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    RBRACKET        reduce using rule 21 (Assign -> Name ASSIGN ExpressionB .)
    AND             shift and go to state 59
    OR              shift and go to state 60


state 54

    (22) Assign -> Name ASSIGN String .

    WriteString     reduce using rule 22 (Assign -> Name ASSIGN String .)
    Err             reduce using rule 22 (Assign -> Name ASSIGN String .)
    Name            reduce using rule 22 (Assign -> Name ASSIGN String .)
    If              reduce using rule 22 (Assign -> Name ASSIGN String .)
    While           reduce using rule 22 (Assign -> Name ASSIGN String .)
    $end            reduce using rule 22 (Assign -> Name ASSIGN String .)
    RBRACKET        reduce using rule 22 (Assign -> Name ASSIGN String .)


state 55

    (23) Assign -> Name ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 86


state 56

    (20) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ExpressionI
    (24) Assign -> Name LSQBRACKET ExpressionI . RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 87
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 57

    (42) factorI -> LPAREN . ExpressionI RPAREN
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 88
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 58

    (58) IfThenElse -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If ExpressionB Then . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 89


state 59

    (46) ExpressionB -> ExpressionB AND . ExpressionB
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 90
    ExpressionI                    shift and go to state 33
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 60

    (47) ExpressionB -> ExpressionB OR . ExpressionB
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 91
    ExpressionI                    shift and go to state 33
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 61

    (48) ExpressionB -> NOT LPAREN . ExpressionB RPAREN
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    ExpressionB                    shift and go to state 92
    ExpressionI                    shift and go to state 33
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 62

    (49) ExpressionB -> LPAREN ExpressionB . RPAREN
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          shift and go to state 93
    AND             shift and go to state 59
    OR              shift and go to state 60


state 63

    (42) factorI -> LPAREN ExpressionI . RPAREN
    (50) ExpressionB -> ExpressionI . LT ExpressionI
    (51) ExpressionB -> ExpressionI . LE ExpressionI
    (52) ExpressionB -> ExpressionI . GT ExpressionI
    (53) ExpressionB -> ExpressionI . GE ExpressionI
    (54) ExpressionB -> ExpressionI . EQ ExpressionI
    (55) ExpressionB -> ExpressionI . NEQ ExpressionI
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 94
    LT              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    GE              shift and go to state 67
    EQ              shift and go to state 68
    NEQ             shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 64

    (50) ExpressionB -> ExpressionI LT . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 95
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 65

    (51) ExpressionB -> ExpressionI LE . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 96
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 66

    (52) ExpressionB -> ExpressionI GT . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 97
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 67

    (53) ExpressionB -> ExpressionI GE . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 98
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 68

    (54) ExpressionB -> ExpressionI EQ . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 99
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 69

    (55) ExpressionB -> ExpressionI NEQ . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 100
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 70

    (32) ExpressionI -> ExpressionI PLUS . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    TermI                          shift and go to state 101
    factorI                        shift and go to state 36

state 71

    (33) ExpressionI -> ExpressionI MINUS . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    TermI                          shift and go to state 102
    factorI                        shift and go to state 36

state 72

    (35) TermI -> TermI TIMES . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    factorI                        shift and go to state 103

state 73

    (36) TermI -> TermI DIVIDE . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    factorI                        shift and go to state 104

state 74

    (37) TermI -> TermI MOD . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    factorI                        shift and go to state 105

state 75

    (43) factorI -> MINUS LPAREN . ExpressionI RPAREN
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 106
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 76

    (44) factorI -> MINUS Integer .

    TIMES           reduce using rule 44 (factorI -> MINUS Integer .)
    DIVIDE          reduce using rule 44 (factorI -> MINUS Integer .)
    MOD             reduce using rule 44 (factorI -> MINUS Integer .)
    LT              reduce using rule 44 (factorI -> MINUS Integer .)
    LE              reduce using rule 44 (factorI -> MINUS Integer .)
    GT              reduce using rule 44 (factorI -> MINUS Integer .)
    GE              reduce using rule 44 (factorI -> MINUS Integer .)
    EQ              reduce using rule 44 (factorI -> MINUS Integer .)
    NEQ             reduce using rule 44 (factorI -> MINUS Integer .)
    PLUS            reduce using rule 44 (factorI -> MINUS Integer .)
    MINUS           reduce using rule 44 (factorI -> MINUS Integer .)
    RPAREN          reduce using rule 44 (factorI -> MINUS Integer .)
    COMMA           reduce using rule 44 (factorI -> MINUS Integer .)
    WriteString     reduce using rule 44 (factorI -> MINUS Integer .)
    Err             reduce using rule 44 (factorI -> MINUS Integer .)
    Name            reduce using rule 44 (factorI -> MINUS Integer .)
    If              reduce using rule 44 (factorI -> MINUS Integer .)
    While           reduce using rule 44 (factorI -> MINUS Integer .)
    $end            reduce using rule 44 (factorI -> MINUS Integer .)
    RBRACKET        reduce using rule 44 (factorI -> MINUS Integer .)
    RSQBRACKET      reduce using rule 44 (factorI -> MINUS Integer .)
    Then            reduce using rule 44 (factorI -> MINUS Integer .)
    AND             reduce using rule 44 (factorI -> MINUS Integer .)
    OR              reduce using rule 44 (factorI -> MINUS Integer .)
    LBRACKET        reduce using rule 44 (factorI -> MINUS Integer .)
    DeclEnd         reduce using rule 44 (factorI -> MINUS Integer .)
    IntDecl         reduce using rule 44 (factorI -> MINUS Integer .)
    BoolDecl        reduce using rule 44 (factorI -> MINUS Integer .)
    StringDecl      reduce using rule 44 (factorI -> MINUS Integer .)


state 77

    (41) factorI -> Name LSQBRACKET . ExpressionI RSQBRACKET
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 107
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 78

    (61) WhileDo -> While ExpressionB LBRACKET . CommandBlock RBRACKET
    (16) CommandBlock -> . CommandBlock Command
    (17) CommandBlock -> . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 108
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 79

    (9) intvar -> IntDecl Name Decl . ExpressionI
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 109
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 80

    (15) arrvar -> IntDecl LSQBRACKET Integer . RSQBRACKET Name

    RSQBRACKET      shift and go to state 110


state 81

    (11) boolvar -> BoolDecl Name Decl . Bool

    Bool            shift and go to state 111


state 82

    (13) stringvar -> StringDecl Name Decl . String

    String          shift and go to state 112


state 83

    (30) Command -> WriteString LPAREN PrintableList RPAREN .

    WriteString     reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Err             reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    Name            reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    If              reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    While           reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    $end            reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)
    RBRACKET        reduce using rule 30 (Command -> WriteString LPAREN PrintableList RPAREN .)


state 84

    (28) PrintableList -> PrintableList COMMA . PrintableElem
    (25) PrintableElem -> . ExpressionI
    (26) PrintableElem -> . ExpressionB
    (27) PrintableElem -> . String
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (45) ExpressionB -> . Bool
    (46) ExpressionB -> . ExpressionB AND ExpressionB
    (47) ExpressionB -> . ExpressionB OR ExpressionB
    (48) ExpressionB -> . NOT LPAREN ExpressionB RPAREN
    (49) ExpressionB -> . LPAREN ExpressionB RPAREN
    (50) ExpressionB -> . ExpressionI LT ExpressionI
    (51) ExpressionB -> . ExpressionI LE ExpressionI
    (52) ExpressionB -> . ExpressionI GT ExpressionI
    (53) ExpressionB -> . ExpressionI GE ExpressionI
    (54) ExpressionB -> . ExpressionI EQ ExpressionI
    (55) ExpressionB -> . ExpressionI NEQ ExpressionI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    String          shift and go to state 50
    Bool            shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 32
    Integer         shift and go to state 37
    Name            shift and go to state 38
    MINUS           shift and go to state 35

    PrintableElem                  shift and go to state 113
    ExpressionI                    shift and go to state 48
    ExpressionB                    shift and go to state 49
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 85

    (31) Command -> Err LPAREN String RPAREN .

    WriteString     reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    Err             reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    Name            reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    If              reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    While           reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    $end            reduce using rule 31 (Command -> Err LPAREN String RPAREN .)
    RBRACKET        reduce using rule 31 (Command -> Err LPAREN String RPAREN .)


state 86

    (23) Assign -> Name ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 114


state 87

    (20) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ExpressionI
    (24) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET . ASSIGN ReadString LPAREN RPAREN

    ASSIGN          shift and go to state 115


state 88

    (42) factorI -> LPAREN ExpressionI . RPAREN
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 94
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 89

    (58) IfThenElse -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If ExpressionB Then LBRACKET . CommandBlock RBRACKET
    (16) CommandBlock -> . CommandBlock Command
    (17) CommandBlock -> . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 116
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 90

    (46) ExpressionB -> ExpressionB AND ExpressionB .
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    Then            reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    AND             reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    OR              reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    LBRACKET        reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    RPAREN          reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    COMMA           reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    WriteString     reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    Err             reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    Name            reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    If              reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    While           reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    $end            reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)
    RBRACKET        reduce using rule 46 (ExpressionB -> ExpressionB AND ExpressionB .)

  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 91

    (47) ExpressionB -> ExpressionB OR ExpressionB .
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    Then            reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    OR              reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    LBRACKET        reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    RPAREN          reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    COMMA           reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    WriteString     reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    Err             reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    Name            reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    If              reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    While           reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    $end            reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    RBRACKET        reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .)
    AND             shift and go to state 59

  ! AND             [ reduce using rule 47 (ExpressionB -> ExpressionB OR ExpressionB .) ]
  ! OR              [ shift and go to state 60 ]


state 92

    (48) ExpressionB -> NOT LPAREN ExpressionB . RPAREN
    (46) ExpressionB -> ExpressionB . AND ExpressionB
    (47) ExpressionB -> ExpressionB . OR ExpressionB

    RPAREN          shift and go to state 117
    AND             shift and go to state 59
    OR              shift and go to state 60


state 93

    (49) ExpressionB -> LPAREN ExpressionB RPAREN .

    Then            reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    AND             reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    OR              reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    LBRACKET        reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    RPAREN          reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    COMMA           reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    WriteString     reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    Err             reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    Name            reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    If              reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    While           reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    $end            reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)
    RBRACKET        reduce using rule 49 (ExpressionB -> LPAREN ExpressionB RPAREN .)


state 94

    (42) factorI -> LPAREN ExpressionI RPAREN .

    TIMES           reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    DIVIDE          reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    MOD             reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    LT              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    LE              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    GT              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    GE              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    EQ              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    NEQ             reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    PLUS            reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    MINUS           reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    RPAREN          reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    COMMA           reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    WriteString     reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    Err             reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    Name            reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    If              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    While           reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    $end            reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    RBRACKET        reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    RSQBRACKET      reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    Then            reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    AND             reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    OR              reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    LBRACKET        reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    DeclEnd         reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    IntDecl         reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    BoolDecl        reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)
    StringDecl      reduce using rule 42 (factorI -> LPAREN ExpressionI RPAREN .)


state 95

    (50) ExpressionB -> ExpressionI LT ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    AND             reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    OR              reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    LBRACKET        reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    RPAREN          reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    COMMA           reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    WriteString     reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    Err             reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    Name            reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    If              reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    While           reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    $end            reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    RBRACKET        reduce using rule 50 (ExpressionB -> ExpressionI LT ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 96

    (51) ExpressionB -> ExpressionI LE ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    AND             reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    OR              reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    LBRACKET        reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    RPAREN          reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    COMMA           reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    WriteString     reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    Err             reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    Name            reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    If              reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    While           reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    $end            reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    RBRACKET        reduce using rule 51 (ExpressionB -> ExpressionI LE ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 97

    (52) ExpressionB -> ExpressionI GT ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    AND             reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    OR              reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    LBRACKET        reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    RPAREN          reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    COMMA           reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    WriteString     reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    Err             reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    Name            reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    If              reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    While           reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    $end            reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    RBRACKET        reduce using rule 52 (ExpressionB -> ExpressionI GT ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 98

    (53) ExpressionB -> ExpressionI GE ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    AND             reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    OR              reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    LBRACKET        reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    RPAREN          reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    COMMA           reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    WriteString     reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    Err             reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    Name            reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    If              reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    While           reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    $end            reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    RBRACKET        reduce using rule 53 (ExpressionB -> ExpressionI GE ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 99

    (54) ExpressionB -> ExpressionI EQ ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    AND             reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    OR              reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    LBRACKET        reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    RPAREN          reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    COMMA           reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    WriteString     reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    Err             reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    Name            reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    If              reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    While           reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    $end            reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    RBRACKET        reduce using rule 54 (ExpressionB -> ExpressionI EQ ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 100

    (55) ExpressionB -> ExpressionI NEQ ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    Then            reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    AND             reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    OR              reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    LBRACKET        reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    RPAREN          reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    COMMA           reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    WriteString     reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    Err             reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    Name            reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    If              reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    While           reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    $end            reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    RBRACKET        reduce using rule 55 (ExpressionB -> ExpressionI NEQ ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 101

    (32) ExpressionI -> ExpressionI PLUS TermI .
    (35) TermI -> TermI . TIMES factorI
    (36) TermI -> TermI . DIVIDE factorI
    (37) TermI -> TermI . MOD factorI

    LT              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    LE              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    GT              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    GE              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    EQ              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    NEQ             reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    PLUS            reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    MINUS           reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    RPAREN          reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    COMMA           reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    WriteString     reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    Err             reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    Name            reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    If              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    While           reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    $end            reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    RBRACKET        reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    RSQBRACKET      reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    Then            reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    AND             reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    OR              reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    LBRACKET        reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    DeclEnd         reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    IntDecl         reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    BoolDecl        reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    StringDecl      reduce using rule 32 (ExpressionI -> ExpressionI PLUS TermI .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 102

    (33) ExpressionI -> ExpressionI MINUS TermI .
    (35) TermI -> TermI . TIMES factorI
    (36) TermI -> TermI . DIVIDE factorI
    (37) TermI -> TermI . MOD factorI

    LT              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    LE              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    GT              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    GE              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    EQ              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    NEQ             reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    PLUS            reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    MINUS           reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    RPAREN          reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    COMMA           reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    WriteString     reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    Err             reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    Name            reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    If              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    While           reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    $end            reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    RBRACKET        reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    RSQBRACKET      reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    Then            reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    AND             reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    OR              reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    LBRACKET        reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    DeclEnd         reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    IntDecl         reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    BoolDecl        reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    StringDecl      reduce using rule 33 (ExpressionI -> ExpressionI MINUS TermI .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    MOD             shift and go to state 74


state 103

    (35) TermI -> TermI TIMES factorI .

    TIMES           reduce using rule 35 (TermI -> TermI TIMES factorI .)
    DIVIDE          reduce using rule 35 (TermI -> TermI TIMES factorI .)
    MOD             reduce using rule 35 (TermI -> TermI TIMES factorI .)
    LT              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    LE              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    GT              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    GE              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    EQ              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    NEQ             reduce using rule 35 (TermI -> TermI TIMES factorI .)
    PLUS            reduce using rule 35 (TermI -> TermI TIMES factorI .)
    MINUS           reduce using rule 35 (TermI -> TermI TIMES factorI .)
    RPAREN          reduce using rule 35 (TermI -> TermI TIMES factorI .)
    COMMA           reduce using rule 35 (TermI -> TermI TIMES factorI .)
    WriteString     reduce using rule 35 (TermI -> TermI TIMES factorI .)
    Err             reduce using rule 35 (TermI -> TermI TIMES factorI .)
    Name            reduce using rule 35 (TermI -> TermI TIMES factorI .)
    If              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    While           reduce using rule 35 (TermI -> TermI TIMES factorI .)
    $end            reduce using rule 35 (TermI -> TermI TIMES factorI .)
    RBRACKET        reduce using rule 35 (TermI -> TermI TIMES factorI .)
    RSQBRACKET      reduce using rule 35 (TermI -> TermI TIMES factorI .)
    Then            reduce using rule 35 (TermI -> TermI TIMES factorI .)
    AND             reduce using rule 35 (TermI -> TermI TIMES factorI .)
    OR              reduce using rule 35 (TermI -> TermI TIMES factorI .)
    LBRACKET        reduce using rule 35 (TermI -> TermI TIMES factorI .)
    DeclEnd         reduce using rule 35 (TermI -> TermI TIMES factorI .)
    IntDecl         reduce using rule 35 (TermI -> TermI TIMES factorI .)
    BoolDecl        reduce using rule 35 (TermI -> TermI TIMES factorI .)
    StringDecl      reduce using rule 35 (TermI -> TermI TIMES factorI .)


state 104

    (36) TermI -> TermI DIVIDE factorI .

    TIMES           reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    DIVIDE          reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    MOD             reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    LT              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    LE              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    GT              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    GE              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    EQ              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    NEQ             reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    PLUS            reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    MINUS           reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    RPAREN          reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    COMMA           reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    WriteString     reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    Err             reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    Name            reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    If              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    While           reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    $end            reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    RBRACKET        reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    RSQBRACKET      reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    Then            reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    AND             reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    OR              reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    LBRACKET        reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    DeclEnd         reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    IntDecl         reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    BoolDecl        reduce using rule 36 (TermI -> TermI DIVIDE factorI .)
    StringDecl      reduce using rule 36 (TermI -> TermI DIVIDE factorI .)


state 105

    (37) TermI -> TermI MOD factorI .

    TIMES           reduce using rule 37 (TermI -> TermI MOD factorI .)
    DIVIDE          reduce using rule 37 (TermI -> TermI MOD factorI .)
    MOD             reduce using rule 37 (TermI -> TermI MOD factorI .)
    LT              reduce using rule 37 (TermI -> TermI MOD factorI .)
    LE              reduce using rule 37 (TermI -> TermI MOD factorI .)
    GT              reduce using rule 37 (TermI -> TermI MOD factorI .)
    GE              reduce using rule 37 (TermI -> TermI MOD factorI .)
    EQ              reduce using rule 37 (TermI -> TermI MOD factorI .)
    NEQ             reduce using rule 37 (TermI -> TermI MOD factorI .)
    PLUS            reduce using rule 37 (TermI -> TermI MOD factorI .)
    MINUS           reduce using rule 37 (TermI -> TermI MOD factorI .)
    RPAREN          reduce using rule 37 (TermI -> TermI MOD factorI .)
    COMMA           reduce using rule 37 (TermI -> TermI MOD factorI .)
    WriteString     reduce using rule 37 (TermI -> TermI MOD factorI .)
    Err             reduce using rule 37 (TermI -> TermI MOD factorI .)
    Name            reduce using rule 37 (TermI -> TermI MOD factorI .)
    If              reduce using rule 37 (TermI -> TermI MOD factorI .)
    While           reduce using rule 37 (TermI -> TermI MOD factorI .)
    $end            reduce using rule 37 (TermI -> TermI MOD factorI .)
    RBRACKET        reduce using rule 37 (TermI -> TermI MOD factorI .)
    RSQBRACKET      reduce using rule 37 (TermI -> TermI MOD factorI .)
    Then            reduce using rule 37 (TermI -> TermI MOD factorI .)
    AND             reduce using rule 37 (TermI -> TermI MOD factorI .)
    OR              reduce using rule 37 (TermI -> TermI MOD factorI .)
    LBRACKET        reduce using rule 37 (TermI -> TermI MOD factorI .)
    DeclEnd         reduce using rule 37 (TermI -> TermI MOD factorI .)
    IntDecl         reduce using rule 37 (TermI -> TermI MOD factorI .)
    BoolDecl        reduce using rule 37 (TermI -> TermI MOD factorI .)
    StringDecl      reduce using rule 37 (TermI -> TermI MOD factorI .)


state 106

    (43) factorI -> MINUS LPAREN ExpressionI . RPAREN
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 107

    (41) factorI -> Name LSQBRACKET ExpressionI . RSQBRACKET
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    RSQBRACKET      shift and go to state 119
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 108

    (61) WhileDo -> While ExpressionB LBRACKET CommandBlock . RBRACKET
    (16) CommandBlock -> CommandBlock . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 120
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 24
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 109

    (9) intvar -> IntDecl Name Decl ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    DeclEnd         reduce using rule 9 (intvar -> IntDecl Name Decl ExpressionI .)
    IntDecl         reduce using rule 9 (intvar -> IntDecl Name Decl ExpressionI .)
    BoolDecl        reduce using rule 9 (intvar -> IntDecl Name Decl ExpressionI .)
    StringDecl      reduce using rule 9 (intvar -> IntDecl Name Decl ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 110

    (15) arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET . Name

    Name            shift and go to state 121


state 111

    (11) boolvar -> BoolDecl Name Decl Bool .

    DeclEnd         reduce using rule 11 (boolvar -> BoolDecl Name Decl Bool .)
    IntDecl         reduce using rule 11 (boolvar -> BoolDecl Name Decl Bool .)
    BoolDecl        reduce using rule 11 (boolvar -> BoolDecl Name Decl Bool .)
    StringDecl      reduce using rule 11 (boolvar -> BoolDecl Name Decl Bool .)


state 112

    (13) stringvar -> StringDecl Name Decl String .

    DeclEnd         reduce using rule 13 (stringvar -> StringDecl Name Decl String .)
    IntDecl         reduce using rule 13 (stringvar -> StringDecl Name Decl String .)
    BoolDecl        reduce using rule 13 (stringvar -> StringDecl Name Decl String .)
    StringDecl      reduce using rule 13 (stringvar -> StringDecl Name Decl String .)


state 113

    (28) PrintableList -> PrintableList COMMA PrintableElem .

    RPAREN          reduce using rule 28 (PrintableList -> PrintableList COMMA PrintableElem .)
    COMMA           reduce using rule 28 (PrintableList -> PrintableList COMMA PrintableElem .)


state 114

    (23) Assign -> Name ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 23 (Assign -> Name ASSIGN ReadString LPAREN RPAREN .)


state 115

    (20) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ExpressionI
    (24) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN . ReadString LPAREN RPAREN
    (32) ExpressionI -> . ExpressionI PLUS TermI
    (33) ExpressionI -> . ExpressionI MINUS TermI
    (34) ExpressionI -> . TermI
    (35) TermI -> . TermI TIMES factorI
    (36) TermI -> . TermI DIVIDE factorI
    (37) TermI -> . TermI MOD factorI
    (38) TermI -> . factorI
    (39) factorI -> . Integer
    (40) factorI -> . Name
    (41) factorI -> . Name LSQBRACKET ExpressionI RSQBRACKET
    (42) factorI -> . LPAREN ExpressionI RPAREN
    (43) factorI -> . MINUS LPAREN ExpressionI RPAREN
    (44) factorI -> . MINUS Integer

    ReadString      shift and go to state 123
    Integer         shift and go to state 37
    Name            shift and go to state 38
    LPAREN          shift and go to state 57
    MINUS           shift and go to state 35

    ExpressionI                    shift and go to state 122
    TermI                          shift and go to state 34
    factorI                        shift and go to state 36

state 116

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If ExpressionB Then LBRACKET CommandBlock . RBRACKET
    (16) CommandBlock -> CommandBlock . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 124
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 24
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 117

    (48) ExpressionB -> NOT LPAREN ExpressionB RPAREN .

    Then            reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    AND             reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    OR              reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    LBRACKET        reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    RPAREN          reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    COMMA           reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    WriteString     reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    Err             reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    Name            reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    If              reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    While           reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    $end            reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)
    RBRACKET        reduce using rule 48 (ExpressionB -> NOT LPAREN ExpressionB RPAREN .)


state 118

    (43) factorI -> MINUS LPAREN ExpressionI RPAREN .

    TIMES           reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    DIVIDE          reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    MOD             reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LT              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LE              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    GT              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    GE              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    EQ              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    NEQ             reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    PLUS            reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    MINUS           reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RPAREN          reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    COMMA           reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    WriteString     reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Err             reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Name            reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    If              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    While           reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    $end            reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RBRACKET        reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    RSQBRACKET      reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    Then            reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    AND             reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    OR              reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    LBRACKET        reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    DeclEnd         reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    IntDecl         reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    BoolDecl        reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)
    StringDecl      reduce using rule 43 (factorI -> MINUS LPAREN ExpressionI RPAREN .)


state 119

    (41) factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .

    TIMES           reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    DIVIDE          reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    MOD             reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LT              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LE              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    GT              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    GE              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    EQ              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    NEQ             reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    PLUS            reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    MINUS           reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RPAREN          reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    COMMA           reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    WriteString     reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Err             reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Name            reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    If              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    While           reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    $end            reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RBRACKET        reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    RSQBRACKET      reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    Then            reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    AND             reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    OR              reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    LBRACKET        reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    DeclEnd         reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    IntDecl         reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    BoolDecl        reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)
    StringDecl      reduce using rule 41 (factorI -> Name LSQBRACKET ExpressionI RSQBRACKET .)


state 120

    (61) WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 61 (WhileDo -> While ExpressionB LBRACKET CommandBlock RBRACKET .)


state 121

    (15) arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .

    DeclEnd         reduce using rule 15 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    IntDecl         reduce using rule 15 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    BoolDecl        reduce using rule 15 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)
    StringDecl      reduce using rule 15 (arrvar -> IntDecl LSQBRACKET Integer RSQBRACKET Name .)


state 122

    (20) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .
    (32) ExpressionI -> ExpressionI . PLUS TermI
    (33) ExpressionI -> ExpressionI . MINUS TermI

    WriteString     reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Err             reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    Name            reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    If              reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    While           reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    $end            reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    RBRACKET        reduce using rule 20 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71


state 123

    (24) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString . LPAREN RPAREN

    LPAREN          shift and go to state 125


state 124

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET . Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .

    Else            shift and go to state 126
    WriteString     reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 59 (IfThen -> If ExpressionB Then LBRACKET CommandBlock RBRACKET .)


state 125

    (24) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN . RPAREN

    RPAREN          shift and go to state 127


state 126

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else . LBRACKET CommandBlock RBRACKET

    LBRACKET        shift and go to state 128


state 127

    (24) Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .

    WriteString     reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Err             reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    Name            reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    If              reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    While           reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    $end            reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)
    RBRACKET        reduce using rule 24 (Assign -> Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN .)


state 128

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET . CommandBlock RBRACKET
    (16) CommandBlock -> . CommandBlock Command
    (17) CommandBlock -> . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    CommandBlock                   shift and go to state 129
    Command                        shift and go to state 5
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 129

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock . RBRACKET
    (16) CommandBlock -> CommandBlock . Command
    (18) Command -> . Assign
    (30) Command -> . WriteString LPAREN PrintableList RPAREN
    (31) Command -> . Err LPAREN String RPAREN
    (56) Command -> . IfThenElse
    (57) Command -> . IfThen
    (60) Command -> . WhileDo
    (19) Assign -> . Name ASSIGN ExpressionI
    (20) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ExpressionI
    (21) Assign -> . Name ASSIGN ExpressionB
    (22) Assign -> . Name ASSIGN String
    (23) Assign -> . Name ASSIGN ReadString LPAREN RPAREN
    (24) Assign -> . Name LSQBRACKET ExpressionI RSQBRACKET ASSIGN ReadString LPAREN RPAREN
    (58) IfThenElse -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET
    (59) IfThen -> . If ExpressionB Then LBRACKET CommandBlock RBRACKET
    (61) WhileDo -> . While ExpressionB LBRACKET CommandBlock RBRACKET

    RBRACKET        shift and go to state 130
    WriteString     shift and go to state 7
    Err             shift and go to state 8
    Name            shift and go to state 12
    If              shift and go to state 13
    While           shift and go to state 14

    Command                        shift and go to state 24
    Assign                         shift and go to state 6
    IfThenElse                     shift and go to state 9
    IfThen                         shift and go to state 10
    WhileDo                        shift and go to state 11

state 130

    (58) IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .

    WriteString     reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Err             reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    Name            reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    If              reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    While           reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    $end            reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)
    RBRACKET        reduce using rule 58 (IfThenElse -> If ExpressionB Then LBRACKET CommandBlock RBRACKET Else LBRACKET CommandBlock RBRACKET .)

