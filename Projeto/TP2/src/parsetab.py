
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEleftANDleftORAND ATTRIB Bool BoolDecl DIVIDE Decl DeclBegin DeclEnd EQ GE GT IntDecl Integer LE LPAREN LT MINUS NEQ NOT Name OR PLUS RPAREN String StringDecl TIMESProgram : DeclBlockDeclBlock : DeclBegin Vars DeclEnd\n    Vars : Vars Var\n    Vars : \n    \n    Var : intvar\n    Var : boolvar\n    Var : stringvar\n    intvar : IntDecl Name Decl Integerintvar : IntDecl Nameboolvar : BoolDecl Name Decl Boolboolvar : BoolDecl Namestringvar : StringDecl Name Decl Stringstringvar : StringDecl Name\n    expressionI : expressionI PLUS termI\n    expressionI : expressionI MINUS termI\n    expressionI : termI\n    termI       : termI TIMES factorI\n    termI       : termI DIVIDE factorI\n    termI       : factorI\n\n    factorI     : Integer\n    factorI     : Name\n    factorI     : LPAREN expressionI RPAREN\n\n    expressionB : Bool\n    expressionB : expressionB AND expressionB\n    expressionB : expressionB OR expressionB\n    expressionB : NOT LPAREN expressionB RPAREN\n    expressionB : LPAREN expressionB RPAREN\n\n    expressionB : expressionI LT expressionI\n    expressionB : expressionI LE expressionI\n    expressionB : expressionI GT expressionI\n    expressionB : expressionI GE expressionI\n    expressionB : expressionI EQ expressionI\n    expressionB : expressionI NEQ expressionI\n    '
    
_lr_action_items = {'DeclBegin':([0,],[3,]),'$end':([1,2,5,],[0,-1,-2,]),'DeclEnd':([3,4,6,7,8,9,13,14,15,19,20,21,],[-4,5,-3,-5,-6,-7,-9,-11,-13,-8,-10,-12,]),'IntDecl':([3,4,6,7,8,9,13,14,15,19,20,21,],[-4,10,-3,-5,-6,-7,-9,-11,-13,-8,-10,-12,]),'BoolDecl':([3,4,6,7,8,9,13,14,15,19,20,21,],[-4,11,-3,-5,-6,-7,-9,-11,-13,-8,-10,-12,]),'StringDecl':([3,4,6,7,8,9,13,14,15,19,20,21,],[-4,12,-3,-5,-6,-7,-9,-11,-13,-8,-10,-12,]),'Name':([10,11,12,],[13,14,15,]),'Decl':([13,14,15,],[16,17,18,]),'Integer':([16,],[19,]),'Bool':([17,],[20,]),'String':([18,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'DeclBlock':([0,],[2,]),'Vars':([3,],[4,]),'Var':([4,],[6,]),'intvar':([4,],[7,]),'boolvar':([4,],[8,]),'stringvar':([4,],[9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> DeclBlock','Program',1,'p_lang_grammar','lang_yacc.py',9),
  ('DeclBlock -> DeclBegin Vars DeclEnd','DeclBlock',3,'p_lang_decls','lang_yacc.py',12),
  ('Vars -> Vars Var','Vars',2,'p_lang_vars','lang_yacc.py',16),
  ('Vars -> <empty>','Vars',0,'p_lang_vars','lang_yacc.py',17),
  ('Var -> intvar','Var',1,'p_lang_var','lang_yacc.py',22),
  ('Var -> boolvar','Var',1,'p_lang_var','lang_yacc.py',23),
  ('Var -> stringvar','Var',1,'p_lang_var','lang_yacc.py',24),
  ('intvar -> IntDecl Name Decl Integer','intvar',4,'p_lang_intvar','lang_yacc.py',28),
  ('intvar -> IntDecl Name','intvar',2,'p_lang_intvar_default','lang_yacc.py',32),
  ('boolvar -> BoolDecl Name Decl Bool','boolvar',4,'p_lang_boolvar','lang_yacc.py',36),
  ('boolvar -> BoolDecl Name','boolvar',2,'p_lang_boolvar_default','lang_yacc.py',40),
  ('stringvar -> StringDecl Name Decl String','stringvar',4,'p_lang_stringvar','lang_yacc.py',44),
  ('stringvar -> StringDecl Name','stringvar',2,'p_lang_stringvar_default','lang_yacc.py',48),
  ('expressionI -> expressionI PLUS termI','expressionI',3,'p_lang_rest','lang_yacc.py',53),
  ('expressionI -> expressionI MINUS termI','expressionI',3,'p_lang_rest','lang_yacc.py',54),
  ('expressionI -> termI','expressionI',1,'p_lang_rest','lang_yacc.py',55),
  ('termI -> termI TIMES factorI','termI',3,'p_lang_rest','lang_yacc.py',56),
  ('termI -> termI DIVIDE factorI','termI',3,'p_lang_rest','lang_yacc.py',57),
  ('termI -> factorI','termI',1,'p_lang_rest','lang_yacc.py',58),
  ('factorI -> Integer','factorI',1,'p_lang_rest','lang_yacc.py',60),
  ('factorI -> Name','factorI',1,'p_lang_rest','lang_yacc.py',61),
  ('factorI -> LPAREN expressionI RPAREN','factorI',3,'p_lang_rest','lang_yacc.py',62),
  ('expressionB -> Bool','expressionB',1,'p_lang_rest','lang_yacc.py',64),
  ('expressionB -> expressionB AND expressionB','expressionB',3,'p_lang_rest','lang_yacc.py',65),
  ('expressionB -> expressionB OR expressionB','expressionB',3,'p_lang_rest','lang_yacc.py',66),
  ('expressionB -> NOT LPAREN expressionB RPAREN','expressionB',4,'p_lang_rest','lang_yacc.py',67),
  ('expressionB -> LPAREN expressionB RPAREN','expressionB',3,'p_lang_rest','lang_yacc.py',68),
  ('expressionB -> expressionI LT expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',70),
  ('expressionB -> expressionI LE expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',71),
  ('expressionB -> expressionI GT expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',72),
  ('expressionB -> expressionI GE expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',73),
  ('expressionB -> expressionI EQ expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',74),
  ('expressionB -> expressionI NEQ expressionI','expressionB',3,'p_lang_rest','lang_yacc.py',75),
]
