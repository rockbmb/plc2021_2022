
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEleftORleftANDAND ASSIGN Bool BoolDecl COMMA DIVIDE Decl DeclBegin DeclEnd EQ GE GT IntDecl Integer LE LPAREN LT MINUS NEQ NOT Name OR PLUS RPAREN ReadString String StringDecl TIMES WriteStringProgram : DeclBlock CommandBlockDeclBlock : DeclBegin Vars DeclEndVars : Vars VarVars : VarVar : intvarVar : boolvarVar : stringvarintvar : IntDecl Name Decl Integerintvar : IntDecl Nameboolvar : BoolDecl Name Decl Boolboolvar : BoolDecl Namestringvar : StringDecl Name Decl Stringstringvar : StringDecl NameCommandBlock : CommandBlock CommandCommandBlock : CommandCommand : AssignAssign : Name ASSIGN ExpressionIAssign : Name ASSIGN ExpressionBAssign : Name ASSIGN StringAssign : Name ASSIGN ReadString LPAREN RPARENPrintableElem : NamePrintableElem : IntegerPrintableElem : BoolPrintableElem : StringPrintableList : PrintableList COMMA PrintableElemPrintableList : PrintableElemCommand : WriteString LPAREN PrintableList RPARENExpressionI : ExpressionI PLUS TermIExpressionI : ExpressionI MINUS TermIExpressionI : TermITermI       : TermI TIMES factorITermI       : TermI DIVIDE factorITermI       : factorIfactorI     : IntegerfactorI     : NamefactorI     : LPAREN ExpressionI RPARENExpressionB : BoolExpressionB : NameExpressionB : ExpressionB AND ExpressionBExpressionB : ExpressionB OR ExpressionBExpressionB : NOT LPAREN ExpressionB RPARENExpressionB : LPAREN ExpressionB RPARENExpressionB : ExpressionI LT ExpressionIExpressionB : ExpressionI LE ExpressionIExpressionB : ExpressionI GT ExpressionIExpressionB : ExpressionI GE ExpressionIExpression : ExpressionIExpression : ExpressionBExpressionB : Expression EQ ExpressionExpressionB : Expression NEQ Expression'
    
_lr_action_items = {'DeclBegin':([0,],[3,]),'$end':([1,4,5,6,17,31,32,33,34,37,38,41,42,46,68,69,71,72,73,74,75,76,78,79,80,81,82,83,85,86,87,88,90,],[0,-1,-15,-16,-14,-35,-17,-18,-19,-30,-37,-33,-34,-27,-28,-35,-29,-43,-44,-45,-46,-39,-40,-20,-42,-36,-31,-32,-49,-47,-48,-50,-41,]),'WriteString':([2,4,5,6,17,20,31,32,33,34,37,38,41,42,46,68,69,71,72,73,74,75,76,78,79,80,81,82,83,85,86,87,88,90,],[7,7,-15,-16,-14,-2,-35,-17,-18,-19,-30,-37,-33,-34,-27,-28,-35,-29,-43,-44,-45,-46,-39,-40,-20,-42,-36,-31,-32,-49,-47,-48,-50,-41,]),'Name':([2,4,5,6,14,15,16,17,18,19,20,31,32,33,34,36,37,38,41,42,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,85,86,87,88,90,],[8,8,-15,-16,22,23,24,-14,27,31,-2,-35,-17,-18,-19,31,-30,-37,-33,-34,-27,27,69,69,69,69,69,69,31,31,69,69,31,31,31,-28,-35,69,-29,-43,-44,-45,-46,-39,-40,-20,-42,-36,-31,-32,-49,-47,-48,-50,-41,]),'IntDecl':([3,9,10,11,12,13,21,22,23,24,64,65,66,],[14,14,-4,-5,-6,-7,-3,-9,-11,-13,-8,-10,-12,]),'BoolDecl':([3,9,10,11,12,13,21,22,23,24,64,65,66,],[15,15,-4,-5,-6,-7,-3,-9,-11,-13,-8,-10,-12,]),'StringDecl':([3,9,10,11,12,13,21,22,23,24,64,65,66,],[16,16,-4,-5,-6,-7,-3,-9,-11,-13,-8,-10,-12,]),'LPAREN':([7,19,35,36,39,48,49,50,51,52,53,54,55,59,60,61,62,63,70,],[18,36,56,36,61,70,70,70,70,70,70,36,36,70,70,36,36,36,70,]),'ASSIGN':([8,],[19,]),'DeclEnd':([9,10,11,12,13,21,22,23,24,64,65,66,],[20,-4,-5,-6,-7,-3,-9,-11,-13,-8,-10,-12,]),'Integer':([18,19,36,43,47,48,49,50,51,52,53,54,55,59,60,61,62,63,70,],[28,42,42,64,28,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'Bool':([18,19,36,44,47,54,55,61,62,63,],[29,38,38,65,29,38,38,38,38,38,]),'String':([18,19,45,47,],[30,34,66,30,]),'ReadString':([19,],[35,]),'NOT':([19,36,54,55,61,62,63,],[39,39,39,39,39,39,39,]),'Decl':([22,23,24,],[43,44,45,]),'RPAREN':([25,26,27,28,29,30,31,37,38,41,42,56,57,58,67,68,69,71,72,73,74,75,76,78,80,81,82,83,84,85,86,87,88,89,90,],[46,-26,-21,-22,-23,-24,-35,-30,-37,-33,-34,79,80,81,-25,-28,-35,-29,-43,-44,-45,-46,-39,-40,-42,-36,-31,-32,90,-49,-47,-48,-50,81,-41,]),'COMMA':([25,26,27,28,29,30,67,],[47,-26,-21,-22,-23,-24,-25,]),'AND':([31,33,37,38,41,42,57,68,69,71,72,73,74,75,76,78,80,81,82,83,84,85,86,87,88,90,],[-35,54,-30,-37,-33,-34,54,-28,-35,-29,-43,-44,-45,-46,-39,54,-42,-36,-31,-32,54,-49,-47,54,-50,-41,]),'OR':([31,33,37,38,41,42,57,68,69,71,72,73,74,75,76,78,80,81,82,83,84,85,86,87,88,90,],[-35,55,-30,-37,-33,-34,55,-28,-35,-29,-43,-44,-45,-46,-39,-40,-42,-36,-31,-32,55,-49,-47,55,-50,-41,]),'EQ':([31,32,33,37,38,40,41,42,57,58,68,69,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,90,],[-35,-47,-48,-30,-37,62,-33,-34,-48,-47,-28,-35,-29,-43,-44,-45,-46,-39,-47,-40,-42,-36,-31,-32,-48,None,-47,-48,None,-41,]),'NEQ':([31,32,33,37,38,40,41,42,57,58,68,69,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,90,],[-35,-47,-48,-30,-37,63,-33,-34,-48,-47,-28,-35,-29,-43,-44,-45,-46,-39,-47,-40,-42,-36,-31,-32,-48,None,-47,-48,None,-41,]),'TIMES':([31,37,41,42,68,69,71,81,82,83,],[-35,59,-33,-34,59,-35,59,-36,-31,-32,]),'DIVIDE':([31,37,41,42,68,69,71,81,82,83,],[-35,60,-33,-34,60,-35,60,-36,-31,-32,]),'PLUS':([31,32,37,41,42,58,68,69,71,72,73,74,75,77,81,82,83,86,89,],[-35,48,-30,-33,-34,48,-28,-35,-29,48,48,48,48,48,-36,-31,-32,48,48,]),'MINUS':([31,32,37,41,42,58,68,69,71,72,73,74,75,77,81,82,83,86,89,],[-35,49,-30,-33,-34,49,-28,-35,-29,49,49,49,49,49,-36,-31,-32,49,49,]),'LT':([31,32,37,41,42,58,68,69,71,77,81,82,83,86,],[-35,50,-30,-33,-34,50,-28,-35,-29,50,-36,-31,-32,50,]),'LE':([31,32,37,41,42,58,68,69,71,77,81,82,83,86,],[-35,51,-30,-33,-34,51,-28,-35,-29,51,-36,-31,-32,51,]),'GT':([31,32,37,41,42,58,68,69,71,77,81,82,83,86,],[-35,52,-30,-33,-34,52,-28,-35,-29,52,-36,-31,-32,52,]),'GE':([31,32,37,41,42,58,68,69,71,77,81,82,83,86,],[-35,53,-30,-33,-34,53,-28,-35,-29,53,-36,-31,-32,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'DeclBlock':([0,],[2,]),'CommandBlock':([2,],[4,]),'Command':([2,4,],[5,17,]),'Assign':([2,4,],[6,6,]),'Vars':([3,],[9,]),'Var':([3,9,],[10,21,]),'intvar':([3,9,],[11,11,]),'boolvar':([3,9,],[12,12,]),'stringvar':([3,9,],[13,13,]),'PrintableList':([18,],[25,]),'PrintableElem':([18,47,],[26,67,]),'ExpressionI':([19,36,50,51,52,53,54,55,61,62,63,70,],[32,58,72,73,74,75,77,77,77,86,86,89,]),'ExpressionB':([19,36,54,55,61,62,63,],[33,57,76,78,84,87,87,]),'TermI':([19,36,48,49,50,51,52,53,54,55,61,62,63,70,],[37,37,68,71,37,37,37,37,37,37,37,37,37,37,]),'Expression':([19,36,54,55,61,62,63,],[40,40,40,40,40,85,88,]),'factorI':([19,36,48,49,50,51,52,53,54,55,59,60,61,62,63,70,],[41,41,41,41,41,41,41,41,41,41,82,83,41,41,41,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> DeclBlock CommandBlock','Program',2,'p_lang_grammar','lang_yacc.py',9),
  ('DeclBlock -> DeclBegin Vars DeclEnd','DeclBlock',3,'p_lang_decls','lang_yacc.py',18),
  ('Vars -> Vars Var','Vars',2,'p_lang_vars_1','lang_yacc.py',22),
  ('Vars -> Var','Vars',1,'p_lang_vars_2','lang_yacc.py',27),
  ('Var -> intvar','Var',1,'p_lang_var_int','lang_yacc.py',31),
  ('Var -> boolvar','Var',1,'p_lang_var_bool','lang_yacc.py',35),
  ('Var -> stringvar','Var',1,'p_lang_var_str','lang_yacc.py',39),
  ('intvar -> IntDecl Name Decl Integer','intvar',4,'p_lang_intvar','lang_yacc.py',43),
  ('intvar -> IntDecl Name','intvar',2,'p_lang_intvar_default','lang_yacc.py',58),
  ('boolvar -> BoolDecl Name Decl Bool','boolvar',4,'p_lang_boolvar','lang_yacc.py',73),
  ('boolvar -> BoolDecl Name','boolvar',2,'p_lang_boolvar_default','lang_yacc.py',88),
  ('stringvar -> StringDecl Name Decl String','stringvar',4,'p_lang_stringvar','lang_yacc.py',103),
  ('stringvar -> StringDecl Name','stringvar',2,'p_lang_stringvar_default','lang_yacc.py',118),
  ('CommandBlock -> CommandBlock Command','CommandBlock',2,'p_lang_commandblock_1','lang_yacc.py',134),
  ('CommandBlock -> Command','CommandBlock',1,'p_lang_commandblock_2','lang_yacc.py',139),
  ('Command -> Assign','Command',1,'p_lang_command_1','lang_yacc.py',146),
  ('Assign -> Name ASSIGN ExpressionI','Assign',3,'p_lang_command_assign_int','lang_yacc.py',152),
  ('Assign -> Name ASSIGN ExpressionB','Assign',3,'p_lang_command_assign_2','lang_yacc.py',174),
  ('Assign -> Name ASSIGN String','Assign',3,'p_lang_command_assign_3','lang_yacc.py',197),
  ('Assign -> Name ASSIGN ReadString LPAREN RPAREN','Assign',5,'p_lang_command_assign_4','lang_yacc.py',219),
  ('PrintableElem -> Name','PrintableElem',1,'p_lang_comma_sep_var','lang_yacc.py',246),
  ('PrintableElem -> Integer','PrintableElem',1,'p_lang_comma_sep_int','lang_yacc.py',257),
  ('PrintableElem -> Bool','PrintableElem',1,'p_lang_comma_sep_bool','lang_yacc.py',262),
  ('PrintableElem -> String','PrintableElem',1,'p_lang_comma_sep_string','lang_yacc.py',267),
  ('PrintableList -> PrintableList COMMA PrintableElem','PrintableList',3,'p_lang_comma_sep_list_not_empty','lang_yacc.py',272),
  ('PrintableList -> PrintableElem','PrintableList',1,'p_lang_comma_sep_list_empty','lang_yacc.py',277),
  ('Command -> WriteString LPAREN PrintableList RPAREN','Command',4,'p_lang_command_4','lang_yacc.py',281),
  ('ExpressionI -> ExpressionI PLUS TermI','ExpressionI',3,'p_lang_expressionI_plus','lang_yacc.py',285),
  ('ExpressionI -> ExpressionI MINUS TermI','ExpressionI',3,'p_lang_expressionI_minus','lang_yacc.py',291),
  ('ExpressionI -> TermI','ExpressionI',1,'p_lang_expressionI_termI','lang_yacc.py',297),
  ('TermI -> TermI TIMES factorI','TermI',3,'p_lang_termI_mul','lang_yacc.py',301),
  ('TermI -> TermI DIVIDE factorI','TermI',3,'p_lang_termI_div','lang_yacc.py',307),
  ('TermI -> factorI','TermI',1,'p_lang_termI','lang_yacc.py',313),
  ('factorI -> Integer','factorI',1,'p_lang_factorI_int','lang_yacc.py',317),
  ('factorI -> Name','factorI',1,'p_lang_factorI_var','lang_yacc.py',321),
  ('factorI -> LPAREN ExpressionI RPAREN','factorI',3,'p_lang_factorI_paren','lang_yacc.py',343),
  ('ExpressionB -> Bool','ExpressionB',1,'p_lang_expressionB_base','lang_yacc.py',347),
  ('ExpressionB -> Name','ExpressionB',1,'p_lang_expressionB_var','lang_yacc.py',354),
  ('ExpressionB -> ExpressionB AND ExpressionB','ExpressionB',3,'p_lang_expressionB_and','lang_yacc.py',386),
  ('ExpressionB -> ExpressionB OR ExpressionB','ExpressionB',3,'p_lang_expressionB_or','lang_yacc.py',393),
  ('ExpressionB -> NOT LPAREN ExpressionB RPAREN','ExpressionB',4,'p_lang_expressionB_not','lang_yacc.py',406),
  ('ExpressionB -> LPAREN ExpressionB RPAREN','ExpressionB',3,'p_lang_expressionB_paren','lang_yacc.py',411),
  ('ExpressionB -> ExpressionI LT ExpressionI','ExpressionB',3,'p_lang_expressionB_lt','lang_yacc.py',415),
  ('ExpressionB -> ExpressionI LE ExpressionI','ExpressionB',3,'p_lang_expressionB_le','lang_yacc.py',421),
  ('ExpressionB -> ExpressionI GT ExpressionI','ExpressionB',3,'p_lang_expressionB_gt','lang_yacc.py',427),
  ('ExpressionB -> ExpressionI GE ExpressionI','ExpressionB',3,'p_lang_expressionB_ge','lang_yacc.py',433),
  ('Expression -> ExpressionI','Expression',1,'p_lang_expression_int','lang_yacc.py',439),
  ('Expression -> ExpressionB','Expression',1,'p_lang_expression_bool','lang_yacc.py',443),
  ('ExpressionB -> Expression EQ Expression','ExpressionB',3,'p_lang_expressionB_eq','lang_yacc.py',447),
  ('ExpressionB -> Expression NEQ Expression','ExpressionB',3,'p_lang_expressionB_neq','lang_yacc.py',453),
]
