
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEleftANDleftORAND ATTRIB BOOLDECL DECL DIVIDE EQ FALSE GE GT INTDECL INTEGER LE LPAREN LT MINUS NAME NEQ NOT OR PLUS RPAREN STRING STRINGDECL TIMES TRUE VARBEGIN VAREND\n    program : VARBLOCK\n\n    VARBLOCK : VARBEGIN VARS VAREND\n    \n    VARS : VARS VAR\n    VARS : \n\n    VAR : intvar\n    VAR : boolvar\n    VAR : stringvar\n\n    intvar : INTDECL NAME DECL expressionI\n    intvar : INTDECL NAME\n    boolvar : BOOLDECL NAME DECL expressionB\n    stringvar : STRINGDECL NAME DECL STRING\n\n    expressionI : expressionI PLUS termI\n    expressionI : expressionI MINUS termI\n    expressionI : termI\n    termI       : termI TIMES factorI\n    termI       : termI DIVIDE factorI\n    termI       : factorI\n\n    factorI     : INTEGER\n    factorI     : NAME\n    factorI     : LPAREN expressionI RPAREN\n\n    expressionB : TRUE\n    expressionB : FALSE\n    expressionB : expressionB AND expressionB\n    expressionB : expressionB OR expressionB\n    expressionB : NOT LPAREN expressionB RPAREN\n    expressionB : LPAREN expressionB RPAREN\n\n    expressionB : expressionI LT expressionI\n    expressionB : expressionI LE expressionI\n    expressionB : expressionI GT expressionI\n    expressionB : expressionI GE expressionI\n    expressionB : expressionI EQ expressionI\n    expressionB : expressionI NEQ expressionI\n    '
    
_lr_action_items = {'VARBEGIN':([0,],[3,]),'$end':([1,2,5,],[0,-1,-2,]),'VAREND':([3,4,6,7,8,9,13,19,20,21,22,23,25,26,27,31,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,],[-4,5,-3,-5,-6,-7,-9,-19,-8,-14,-17,-18,-10,-21,-22,-11,-12,-13,-15,-16,-20,-23,-24,-26,-27,-28,-29,-30,-31,-32,-25,]),'INTDECL':([3,4,6,7,8,9,13,19,20,21,22,23,25,26,27,31,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,],[-4,10,-3,-5,-6,-7,-9,-19,-8,-14,-17,-18,-10,-21,-22,-11,-12,-13,-15,-16,-20,-23,-24,-26,-27,-28,-29,-30,-31,-32,-25,]),'BOOLDECL':([3,4,6,7,8,9,13,19,20,21,22,23,25,26,27,31,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,],[-4,11,-3,-5,-6,-7,-9,-19,-8,-14,-17,-18,-10,-21,-22,-11,-12,-13,-15,-16,-20,-23,-24,-26,-27,-28,-29,-30,-31,-32,-25,]),'STRINGDECL':([3,4,6,7,8,9,13,19,20,21,22,23,25,26,27,31,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,],[-4,12,-3,-5,-6,-7,-9,-19,-8,-14,-17,-18,-10,-21,-22,-11,-12,-13,-15,-16,-20,-23,-24,-26,-27,-28,-29,-30,-31,-32,-25,]),'NAME':([10,11,12,16,17,24,29,32,33,34,35,37,38,39,42,43,44,45,46,47,],[13,14,15,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'DECL':([13,14,15,],[16,17,18,]),'INTEGER':([16,17,24,29,32,33,34,35,37,38,39,42,43,44,45,46,47,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LPAREN':([16,17,24,28,29,32,33,34,35,37,38,39,42,43,44,45,46,47,],[24,29,24,39,29,24,24,24,24,29,29,29,24,24,24,24,24,24,]),'TRUE':([17,29,37,38,39,],[26,26,26,26,26,]),'FALSE':([17,29,37,38,39,],[27,27,27,27,27,]),'NOT':([17,29,37,38,39,],[28,28,28,28,28,]),'STRING':([18,],[31,]),'TIMES':([19,21,22,23,48,49,50,51,52,],[-19,34,-17,-18,34,34,-15,-16,-20,]),'DIVIDE':([19,21,22,23,48,49,50,51,52,],[-19,35,-17,-18,35,35,-15,-16,-20,]),'PLUS':([19,20,21,22,23,30,36,41,48,49,50,51,52,57,58,59,60,61,62,],[-19,32,-14,-17,-18,32,32,32,-12,-13,-15,-16,-20,32,32,32,32,32,32,]),'MINUS':([19,20,21,22,23,30,36,41,48,49,50,51,52,57,58,59,60,61,62,],[-19,33,-14,-17,-18,33,33,33,-12,-13,-15,-16,-20,33,33,33,33,33,33,]),'LT':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,42,42,-12,-13,-15,-16,-20,]),'LE':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,43,43,-12,-13,-15,-16,-20,]),'GT':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,44,44,-12,-13,-15,-16,-20,]),'GE':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,45,45,-12,-13,-15,-16,-20,]),'EQ':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,46,46,-12,-13,-15,-16,-20,]),'NEQ':([19,21,22,23,30,41,48,49,50,51,52,],[-19,-14,-17,-18,47,47,-12,-13,-15,-16,-20,]),'RPAREN':([19,21,22,23,26,27,36,40,41,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-19,-14,-17,-18,-21,-22,52,56,52,-12,-13,-15,-16,-20,-23,-24,63,-26,-27,-28,-29,-30,-31,-32,-25,]),'AND':([19,21,22,23,25,26,27,40,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-19,-14,-17,-18,37,-21,-22,37,-12,-13,-15,-16,-20,-23,-24,37,-26,-27,-28,-29,-30,-31,-32,-25,]),'OR':([19,21,22,23,25,26,27,40,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-19,-14,-17,-18,38,-21,-22,38,-12,-13,-15,-16,-20,38,-24,38,-26,-27,-28,-29,-30,-31,-32,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'VARBLOCK':([0,],[2,]),'VARS':([3,],[4,]),'VAR':([4,],[6,]),'intvar':([4,],[7,]),'boolvar':([4,],[8,]),'stringvar':([4,],[9,]),'expressionI':([16,17,24,29,37,38,39,42,43,44,45,46,47,],[20,30,36,41,30,30,30,57,58,59,60,61,62,]),'termI':([16,17,24,29,32,33,37,38,39,42,43,44,45,46,47,],[21,21,21,21,48,49,21,21,21,21,21,21,21,21,21,]),'factorI':([16,17,24,29,32,33,34,35,37,38,39,42,43,44,45,46,47,],[22,22,22,22,22,22,50,51,22,22,22,22,22,22,22,22,22,]),'expressionB':([17,29,37,38,39,],[25,40,53,54,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> VARBLOCK','program',1,'p_lang_grammar','lang_yacc.py',9),
  ('VARBLOCK -> VARBEGIN VARS VAREND','VARBLOCK',3,'p_lang_grammar','lang_yacc.py',11),
  ('VARS -> VARS VAR','VARS',2,'p_lang_grammar','lang_yacc.py',13),
  ('VARS -> <empty>','VARS',0,'p_lang_grammar','lang_yacc.py',14),
  ('VAR -> intvar','VAR',1,'p_lang_grammar','lang_yacc.py',16),
  ('VAR -> boolvar','VAR',1,'p_lang_grammar','lang_yacc.py',17),
  ('VAR -> stringvar','VAR',1,'p_lang_grammar','lang_yacc.py',18),
  ('intvar -> INTDECL NAME DECL expressionI','intvar',4,'p_lang_grammar','lang_yacc.py',20),
  ('intvar -> INTDECL NAME','intvar',2,'p_lang_grammar','lang_yacc.py',21),
  ('boolvar -> BOOLDECL NAME DECL expressionB','boolvar',4,'p_lang_grammar','lang_yacc.py',22),
  ('stringvar -> STRINGDECL NAME DECL STRING','stringvar',4,'p_lang_grammar','lang_yacc.py',23),
  ('expressionI -> expressionI PLUS termI','expressionI',3,'p_lang_grammar','lang_yacc.py',25),
  ('expressionI -> expressionI MINUS termI','expressionI',3,'p_lang_grammar','lang_yacc.py',26),
  ('expressionI -> termI','expressionI',1,'p_lang_grammar','lang_yacc.py',27),
  ('termI -> termI TIMES factorI','termI',3,'p_lang_grammar','lang_yacc.py',28),
  ('termI -> termI DIVIDE factorI','termI',3,'p_lang_grammar','lang_yacc.py',29),
  ('termI -> factorI','termI',1,'p_lang_grammar','lang_yacc.py',30),
  ('factorI -> INTEGER','factorI',1,'p_lang_grammar','lang_yacc.py',32),
  ('factorI -> NAME','factorI',1,'p_lang_grammar','lang_yacc.py',33),
  ('factorI -> LPAREN expressionI RPAREN','factorI',3,'p_lang_grammar','lang_yacc.py',34),
  ('expressionB -> TRUE','expressionB',1,'p_lang_grammar','lang_yacc.py',36),
  ('expressionB -> FALSE','expressionB',1,'p_lang_grammar','lang_yacc.py',37),
  ('expressionB -> expressionB AND expressionB','expressionB',3,'p_lang_grammar','lang_yacc.py',38),
  ('expressionB -> expressionB OR expressionB','expressionB',3,'p_lang_grammar','lang_yacc.py',39),
  ('expressionB -> NOT LPAREN expressionB RPAREN','expressionB',4,'p_lang_grammar','lang_yacc.py',40),
  ('expressionB -> LPAREN expressionB RPAREN','expressionB',3,'p_lang_grammar','lang_yacc.py',41),
  ('expressionB -> expressionI LT expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',43),
  ('expressionB -> expressionI LE expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',44),
  ('expressionB -> expressionI GT expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',45),
  ('expressionB -> expressionI GE expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',46),
  ('expressionB -> expressionI EQ expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',47),
  ('expressionB -> expressionI NEQ expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',48),
]
