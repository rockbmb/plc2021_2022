
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQNEQleftPLUSMINUSleftTIMESDIVIDEleftANDleftORAND ATTRIB BOOLDECL DECL DIVIDE EQ FALSE GE GT INTDECL INTEGER LE LPAREN LT MINUS NAME NEQ NOT OR PLUS RPAREN TIMES TRUE VARBEGIN VAREND\n    program : VARBLOCK\n\n    VARBLOCK : VARBEGIN VARS VAREND\n    \n    VARS : VARS VAR\n    VARS : \n\n    VAR : intvar\n    VAR : boolvar\n\n    intvar : INTDECL NAME DECL expressionI\n    intvar : INTDECL NAME\n    boolvar : BOOLDECL NAME DECL expressionB\n\n    expressionI : expressionI PLUS termI\n    expressionI : expressionI MINUS termI\n    expressionI : termI\n    termI       : termI TIMES factorI\n    termI       : termI DIVIDE factorI\n    termI       : factorI\n\n    factorI     : INTEGER\n    factorI     : NAME\n    factorI     : LPAREN expressionI RPAREN\n\n    expressionB : TRUE\n    expressionB : FALSE\n    expressionB : expressionB AND expressionB\n    expressionB : expressionB OR expressionB\n    expressionB : NOT LPAREN expressionB RPAREN\n    expressionB : LPAREN expressionB RPAREN\n\n    expressionB : expressionI LT expressionI\n    expressionB : expressionI LE expressionI\n    expressionB : expressionI GT expressionI\n    expressionB : expressionI GE expressionI\n    expressionB : expressionI EQ expressionI\n    expressionB : expressionI NEQ expressionI\n    '
    
_lr_action_items = {'VARBEGIN':([0,],[3,]),'$end':([1,2,5,],[0,-1,-2,]),'VAREND':([3,4,6,7,8,11,15,16,17,18,19,21,22,23,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,],[-4,5,-3,-5,-6,-8,-17,-7,-12,-15,-16,-9,-19,-20,-10,-11,-13,-14,-18,-21,-22,-24,-25,-26,-27,-28,-29,-30,-23,]),'INTDECL':([3,4,6,7,8,11,15,16,17,18,19,21,22,23,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,],[-4,9,-3,-5,-6,-8,-17,-7,-12,-15,-16,-9,-19,-20,-10,-11,-13,-14,-18,-21,-22,-24,-25,-26,-27,-28,-29,-30,-23,]),'BOOLDECL':([3,4,6,7,8,11,15,16,17,18,19,21,22,23,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,],[-4,10,-3,-5,-6,-8,-17,-7,-12,-15,-16,-9,-19,-20,-10,-11,-13,-14,-18,-21,-22,-24,-25,-26,-27,-28,-29,-30,-23,]),'NAME':([9,10,13,14,20,25,27,28,29,30,32,33,34,37,38,39,40,41,42,],[11,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'DECL':([11,12,],[13,14,]),'INTEGER':([13,14,20,25,27,28,29,30,32,33,34,37,38,39,40,41,42,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'LPAREN':([13,14,20,24,25,27,28,29,30,32,33,34,37,38,39,40,41,42,],[20,25,20,34,25,20,20,20,20,25,25,25,20,20,20,20,20,20,]),'TRUE':([14,25,32,33,34,],[22,22,22,22,22,]),'FALSE':([14,25,32,33,34,],[23,23,23,23,23,]),'NOT':([14,25,32,33,34,],[24,24,24,24,24,]),'TIMES':([15,17,18,19,43,44,45,46,47,],[-17,29,-15,-16,29,29,-13,-14,-18,]),'DIVIDE':([15,17,18,19,43,44,45,46,47,],[-17,30,-15,-16,30,30,-13,-14,-18,]),'PLUS':([15,16,17,18,19,26,31,36,43,44,45,46,47,52,53,54,55,56,57,],[-17,27,-12,-15,-16,27,27,27,-10,-11,-13,-14,-18,27,27,27,27,27,27,]),'MINUS':([15,16,17,18,19,26,31,36,43,44,45,46,47,52,53,54,55,56,57,],[-17,28,-12,-15,-16,28,28,28,-10,-11,-13,-14,-18,28,28,28,28,28,28,]),'LT':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,37,37,-10,-11,-13,-14,-18,]),'LE':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,38,38,-10,-11,-13,-14,-18,]),'GT':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,39,39,-10,-11,-13,-14,-18,]),'GE':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,40,40,-10,-11,-13,-14,-18,]),'EQ':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,41,41,-10,-11,-13,-14,-18,]),'NEQ':([15,17,18,19,26,36,43,44,45,46,47,],[-17,-12,-15,-16,42,42,-10,-11,-13,-14,-18,]),'RPAREN':([15,17,18,19,22,23,31,35,36,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-17,-12,-15,-16,-19,-20,47,51,47,-10,-11,-13,-14,-18,-21,-22,58,-24,-25,-26,-27,-28,-29,-30,-23,]),'AND':([15,17,18,19,21,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-17,-12,-15,-16,32,-19,-20,32,-10,-11,-13,-14,-18,-21,-22,32,-24,-25,-26,-27,-28,-29,-30,-23,]),'OR':([15,17,18,19,21,22,23,35,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-17,-12,-15,-16,33,-19,-20,33,-10,-11,-13,-14,-18,33,-22,33,-24,-25,-26,-27,-28,-29,-30,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'VARBLOCK':([0,],[2,]),'VARS':([3,],[4,]),'VAR':([4,],[6,]),'intvar':([4,],[7,]),'boolvar':([4,],[8,]),'expressionI':([13,14,20,25,32,33,34,37,38,39,40,41,42,],[16,26,31,36,26,26,26,52,53,54,55,56,57,]),'termI':([13,14,20,25,27,28,32,33,34,37,38,39,40,41,42,],[17,17,17,17,43,44,17,17,17,17,17,17,17,17,17,]),'factorI':([13,14,20,25,27,28,29,30,32,33,34,37,38,39,40,41,42,],[18,18,18,18,18,18,45,46,18,18,18,18,18,18,18,18,18,]),'expressionB':([14,25,32,33,34,],[21,35,48,49,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> VARBLOCK','program',1,'p_lang_grammar','lang_yacc.py',9),
  ('VARBLOCK -> VARBEGIN VARS VAREND','VARBLOCK',3,'p_lang_grammar','lang_yacc.py',11),
  ('VARS -> VARS VAR','VARS',2,'p_lang_grammar','lang_yacc.py',13),
  ('VARS -> <empty>','VARS',0,'p_lang_grammar','lang_yacc.py',14),
  ('VAR -> intvar','VAR',1,'p_lang_grammar','lang_yacc.py',16),
  ('VAR -> boolvar','VAR',1,'p_lang_grammar','lang_yacc.py',17),
  ('intvar -> INTDECL NAME DECL expressionI','intvar',4,'p_lang_grammar','lang_yacc.py',19),
  ('intvar -> INTDECL NAME','intvar',2,'p_lang_grammar','lang_yacc.py',20),
  ('boolvar -> BOOLDECL NAME DECL expressionB','boolvar',4,'p_lang_grammar','lang_yacc.py',21),
  ('expressionI -> expressionI PLUS termI','expressionI',3,'p_lang_grammar','lang_yacc.py',23),
  ('expressionI -> expressionI MINUS termI','expressionI',3,'p_lang_grammar','lang_yacc.py',24),
  ('expressionI -> termI','expressionI',1,'p_lang_grammar','lang_yacc.py',25),
  ('termI -> termI TIMES factorI','termI',3,'p_lang_grammar','lang_yacc.py',26),
  ('termI -> termI DIVIDE factorI','termI',3,'p_lang_grammar','lang_yacc.py',27),
  ('termI -> factorI','termI',1,'p_lang_grammar','lang_yacc.py',28),
  ('factorI -> INTEGER','factorI',1,'p_lang_grammar','lang_yacc.py',30),
  ('factorI -> NAME','factorI',1,'p_lang_grammar','lang_yacc.py',31),
  ('factorI -> LPAREN expressionI RPAREN','factorI',3,'p_lang_grammar','lang_yacc.py',32),
  ('expressionB -> TRUE','expressionB',1,'p_lang_grammar','lang_yacc.py',34),
  ('expressionB -> FALSE','expressionB',1,'p_lang_grammar','lang_yacc.py',35),
  ('expressionB -> expressionB AND expressionB','expressionB',3,'p_lang_grammar','lang_yacc.py',36),
  ('expressionB -> expressionB OR expressionB','expressionB',3,'p_lang_grammar','lang_yacc.py',37),
  ('expressionB -> NOT LPAREN expressionB RPAREN','expressionB',4,'p_lang_grammar','lang_yacc.py',38),
  ('expressionB -> LPAREN expressionB RPAREN','expressionB',3,'p_lang_grammar','lang_yacc.py',39),
  ('expressionB -> expressionI LT expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',41),
  ('expressionB -> expressionI LE expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',42),
  ('expressionB -> expressionI GT expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',43),
  ('expressionB -> expressionI GE expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',44),
  ('expressionB -> expressionI EQ expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',45),
  ('expressionB -> expressionI NEQ expressionI','expressionB',3,'p_lang_grammar','lang_yacc.py',46),
]
